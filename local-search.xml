<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>01-了解声纹识别</title>
    <link href="/2024/07/30/01-%E4%BA%86%E8%A7%A3%E5%A3%B0%E7%BA%B9%E8%AF%86%E5%88%AB/"/>
    <url>/2024/07/30/01-%E4%BA%86%E8%A7%A3%E5%A3%B0%E7%BA%B9%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><strong>工作需要了解学习</strong></p><h2 id="什么是声纹识别？"><a href="#什么是声纹识别？" class="headerlink" title="什么是声纹识别？"></a>什么是声纹识别？</h2><p>通常来说，声纹就是一个人的声音，声音里面包含的特征，就是声纹，和指纹类似，知识一个属于声音，一个属于具像化实体； 然而在系统中的实现，是分为2个步骤的</p><ol><li>声音特征提取</li><li>声音特征匹配</li></ol><h2 id="实现技术浅谈"><a href="#实现技术浅谈" class="headerlink" title="实现技术浅谈"></a>实现技术浅谈</h2><ul><li><p>声音特征提取<br>通过对音频信号的处理，提取处能够反映说话者特征的声纹特征， 据我目前了解，可以使用梅尔平路到谱系数，英文简称： MFCC，还有线性预测编码： LPC</p></li><li><p>声纹匹配<br>从特征处拿到数据后与数据库中的声纹模板进行比较，计算相似度就可以确定说话者的身份。</p></li></ul><p>技术框架是基于人工智能体系路线，会使用到相对复杂的处理算法，大概如下</p><ul><li><p>音频数据采集</p></li><li><p>预处理</p></li><li><p>特征提取</p></li><li><p>模型训练和匹配<br>主要技术难点在，信号处理，和机器学习上！</p></li><li><p>比如使用python的pyaudio库实现声音数据采集，然后交给声纹接口就得到一个声纹信息，此时拿到声纹信息去数据库进行匹配就可以得到判断（声音属于什么类型&#x2F;声音属于谁的）</p></li></ul><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>特征提取是声纹识别的核心步骤，从音频信号中提取出能够反映说话者特征的参数。</p><p>常用方法：</p><ul><li>梅尔频率倒谱系数（MFCC）：最常用的声纹特征提取方法，反映了音频信号的频率特性。</li><li>线性预测编码（LPC）：通过对音频信号进行线性预测，提取其特征。</li></ul><p>步骤：</p><ul><li>将音频信号分帧。</li><li>对每一帧进行短时傅里叶变换（STFT）。</li><li>计算MFCC或LPC特征。</li></ul><h3 id="声纹匹配"><a href="#声纹匹配" class="headerlink" title="声纹匹配"></a>声纹匹配</h3><p>这里一般是一个模型，或者算法来集合来实现，是此技术的核心点</p><p>常用模型：</p><ul><li>高斯混合模型（GMM）：传统声纹识别中常用的模型。</li><li>深度学习模型：如卷积神经网络（CNN）和循环神经网络（RNN），可以获得更高的识别精度。</li></ul><p>步骤：</p><ul><li>准备训练数据集，包括多位说话者的语音样本。</li><li>使用提取的声纹特征训练模型。</li></ul><h2 id="开源解决方案"><a href="#开源解决方案" class="headerlink" title="开源解决方案"></a>开源解决方案</h2><p>支持多并发处理的声纹识别开源解决方案需要具备高效的处理能力和良好的可扩展性。以下是几种适合多并发处理的开源解决方案：</p><h3 id="1-Kaldi"><a href="#1-Kaldi" class="headerlink" title="1. Kaldi"></a>1. <strong>Kaldi</strong></h3><p>Kaldi 是一个强大的语音识别工具包，能够高效处理大量并发请求，适用于大规模语音数据处理。</p><p><strong>特点</strong>：</p><ul><li>高度可定制化。</li><li>提供丰富的功能，适合研究和开发。</li></ul><p><strong>优点</strong>：</p><ul><li>社区活跃，文档详细。</li><li>支持大规模并行处理。</li></ul><p><strong>缺点</strong>：</p><ul><li>学习曲线较陡，配置复杂。</li></ul><p><strong>使用方法</strong>：</p><ul><li>使用Kaldi进行声纹识别可以通过编写脚本来实现并行处理。Kaldi的官方文档中有详细的教程和示例。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/kaldi-asr/kaldi.git<br><span class="hljs-built_in">cd</span> kaldi/tools<br>make<br><span class="hljs-built_in">cd</span> ../src<br>./configure<br>make clean -j &amp;&amp; make depend -j &amp;&amp; make -j<br></code></pre></td></tr></table></figure><h3 id="2-VoxCeleb"><a href="#2-VoxCeleb" class="headerlink" title="2. VoxCeleb"></a>2. <strong>VoxCeleb</strong></h3><p>VoxCeleb 提供了大规模的声纹数据集和多个基于深度学习的模型，适合训练和评估深度学习声纹识别模型。</p><p><strong>特点</strong>：</p><ul><li>大规模数据集和深度学习模型。</li><li>提供预训练模型和数据集下载。</li></ul><p><strong>优点</strong>：</p><ul><li>数据集丰富，适合深度学习训练。</li><li>提供多个预训练模型。</li></ul><p><strong>缺点</strong>：</p><ul><li>需要较多计算资源进行训练。</li></ul><p><strong>使用方法</strong>：</p><ul><li>VoxCeleb 可以与 TensorFlow 或 PyTorch 集成，使用分布式训练和推理框架进行并发处理。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例代码</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> SpeakerNet <span class="hljs-keyword">import</span> SpeakerNet, train<br><br><span class="hljs-comment"># 设置模型和数据集路径</span><br>model = SpeakerNet(<span class="hljs-string">&#x27;ResNetSE34L&#x27;</span>, device=<span class="hljs-string">&#x27;cuda&#x27;</span>)<br>train_dataset_path = <span class="hljs-string">&#x27;path/to/train/dataset&#x27;</span><br>test_dataset_path = <span class="hljs-string">&#x27;path/to/test/dataset&#x27;</span><br><br><span class="hljs-comment"># 训练模型</span><br>train(model, train_dataset_path, epochs=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 并发推理示例</span><br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recognize_speaker</span>(<span class="hljs-params">features</span>):<br>    predicted_label = model(features.cuda())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;匹配到的说话者ID: <span class="hljs-subst">&#123;predicted_label.argmax().item()&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 假设有多个特征需要并发处理</span><br>features_list = [torch.rand(<span class="hljs-number">1</span>, <span class="hljs-number">13</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>threads = []<br><span class="hljs-keyword">for</span> features <span class="hljs-keyword">in</span> features_list:<br>    thread = threading.Thread(target=recognize_speaker, args=(features,))<br>    threads.append(thread)<br>    thread.start()<br><br><span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>    thread.join()<br></code></pre></td></tr></table></figure><h3 id="3-TensorFlow-Serving"><a href="#3-TensorFlow-Serving" class="headerlink" title="3. TensorFlow Serving"></a>3. <strong>TensorFlow Serving</strong></h3><p>TensorFlow Serving 是一个灵活的、高性能的用于机器学习模型推理的开源库，可以高效地进行多并发请求处理。</p><p><strong>特点</strong>：</p><ul><li>支持模型的热部署。</li><li>提供高吞吐量和低延迟的推理服务。</li></ul><p><strong>优点</strong>：</p><ul><li>高性能，支持大规模并发请求。</li><li>易于与 TensorFlow 模型集成。</li></ul><p><strong>缺点</strong>：</p><ul><li>需要部署和维护 TensorFlow Serving 服务器。</li></ul><p><strong>使用方法</strong>：</p><ul><li>部署 TensorFlow Serving 并使用预训练的声纹识别模型进行并发处理。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 TensorFlow Serving</span><br>docker pull tensorflow/serving<br><br><span class="hljs-comment"># 运行 TensorFlow Serving</span><br>docker run -p 8501:8501 --name=tf_serving \<br>  --mount <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span>,<span class="hljs-built_in">source</span>=/path/to/your/model,destination=/models/model \<br>  -e MODEL_NAME=model -t tensorflow/serving<br><br><span class="hljs-comment"># 客户端代码进行并发请求</span><br>import requests<br>import json<br>import threading<br><br>def send_request(features):<br>    url = <span class="hljs-string">&#x27;http://localhost:8501/v1/models/model:predict&#x27;</span><br>    data = json.dumps(&#123;<span class="hljs-string">&quot;instances&quot;</span>: features.tolist()&#125;)<br>    headers = &#123;<span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>&#125;<br>    response = requests.post(url, data=data, headers=headers)<br>    <span class="hljs-built_in">print</span>(response.json())<br><br><span class="hljs-comment"># 假设有多个特征需要并发处理</span><br>features_list = [np.random.rand(1, 13) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(10)]<br>threads = []<br><span class="hljs-keyword">for</span> features <span class="hljs-keyword">in</span> features_list:<br>    thread = threading.Thread(target=send_request, args=(features,))<br>    threads.append(thread)<br>    thread.start()<br><br><span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>    thread.join()<br></code></pre></td></tr></table></figure><h3 id="4-PyTorch-with-TorchServe"><a href="#4-PyTorch-with-TorchServe" class="headerlink" title="4. PyTorch with TorchServe"></a>4. <strong>PyTorch with TorchServe</strong></h3><p>TorchServe 是一个灵活和易于使用的 PyTorch 模型推理服务库，适合处理大规模并发请求。</p><p><strong>特点</strong>：</p><ul><li>支持多种模型格式。</li><li>提供自动扩展和负载均衡。</li></ul><p><strong>优点</strong>：</p><ul><li>高性能，适合大规模并发处理。</li><li>易于与 PyTorch 模型集成。</li></ul><p><strong>缺点</strong>：</p><ul><li>需要部署和维护 TorchServe 服务器。</li></ul><p><strong>使用方法</strong>：</p><ul><li>部署 TorchServe 并使用预训练的声纹识别模型进行并发处理。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 TorchServe</span><br>pip install torchserve torch-model-archiver<br><br><span class="hljs-comment"># 打包并部署模型</span><br>torch-model-archiver --model-name speaker-recognition --version 1.0 --model-file model.py --serialized-file model.pth --handler handler.py<br><span class="hljs-built_in">mkdir</span> model_store<br><span class="hljs-built_in">mv</span> speaker-recognition.mar model_store/<br>torchserve --start --model-store model_store --models speaker-recognition=speaker-recognition.mar<br><br><span class="hljs-comment"># 客户端代码进行并发请求</span><br>import requests<br>import json<br>import threading<br><br>def send_request(features):<br>    url = <span class="hljs-string">&#x27;http://localhost:8080/predictions/speaker-recognition&#x27;</span><br>    data = json.dumps(features.tolist())<br>    headers = &#123;<span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>&#125;<br>    response = requests.post(url, data=data, headers=headers)<br>    <span class="hljs-built_in">print</span>(response.json())<br><br><span class="hljs-comment"># 假设有多个特征需要并发处理</span><br>features_list = [np.random.rand(1, 13) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(10)]<br>threads = []<br><span class="hljs-keyword">for</span> features <span class="hljs-keyword">in</span> features_list:<br>    thread = threading.Thread(target=send_request, args=(features,))<br>    threads.append(thread)<br>    thread.start()<br><br><span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>    thread.join()<br></code></pre></td></tr></table></figure><h3 id="5-DeepSpeech"><a href="#5-DeepSpeech" class="headerlink" title="5. DeepSpeech"></a>5. <strong>DeepSpeech</strong></h3><p>DeepSpeech 是 Mozilla 开发的一个开源语音识别系统，基于深度学习，支持并发请求处理。</p><p><strong>特点</strong>：</p><ul><li>高性能的语音识别系统。</li><li>提供预训练模型，易于部署。</li></ul><p><strong>优点</strong>：</p><ul><li>社区支持良好，易于使用。</li><li>适用于实时语音识别和大规模并发处理。</li></ul><p><strong>缺点</strong>：</p><ul><li>主要用于语音识别，但可以扩展用于声纹识别。</li></ul><p><strong>使用方法</strong>：</p><ul><li>部署 DeepSpeech 并使用预训练的模型进行并发处理。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 DeepSpeech</span><br>pip install deepspeech<br><br><span class="hljs-comment"># 使用预训练模型进行推理</span><br>import deepspeech<br>import numpy as np<br>import threading<br><br>model_file_path = <span class="hljs-string">&#x27;deepspeech-0.9.3-models.pbmm&#x27;</span><br>model = deepspeech.Model(model_file_path)<br><br>def recognize_speech(audio_data):<br>    text = model.stt(audio_data)<br>    <span class="hljs-built_in">print</span>(f<span class="hljs-string">&quot;识别结果: &#123;text&#125;&quot;</span>)<br><br><span class="hljs-comment"># 假设有多个音频数据需要并发处理</span><br>audio_data_list = [np.random.rand(16000) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(10)]<br>threads = []<br><span class="hljs-keyword">for</span> audio_data <span class="hljs-keyword">in</span> audio_data_list:<br>    thread = threading.Thread(target=recognize_speech, args=(audio_data,))<br>    threads.append(thread)<br>    thread.start()<br><br><span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>    thread.join()<br></code></pre></td></tr></table></figure><p>这些开源解决方案提供了高效的并发处理能力，适用于不同的应用场景和需求。你可以根据具体需求选择合适的解决方案进行开发和部署。</p>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>声纹识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-服务日志标准化建议和常见方案</title>
    <link href="/2024/07/27/04-%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%A0%87%E5%87%86%E5%8C%96%E5%BB%BA%E8%AE%AE%E5%92%8C%E5%B8%B8%E8%A7%81%E6%96%B9%E6%A1%88/"/>
    <url>/2024/07/27/04-%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%A0%87%E5%87%86%E5%8C%96%E5%BB%BA%E8%AE%AE%E5%92%8C%E5%B8%B8%E8%A7%81%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基于loki的日志格式和配置对接"><a href="#基于loki的日志格式和配置对接" class="headerlink" title="基于loki的日志格式和配置对接"></a>基于loki的日志格式和配置对接</h1><p>在复杂且多样的软件架构中，实现日志收集的标准化对于维护、监控和调试系统至关重要。Loki 是一个有效的日志收集和查询系统，它与 Prometheus 和 Grafana 配合使用，可以提供强大的日志管理功能。以下是实现 Loki 日志收集标准化的一些建议和最佳实践。</p><h3 id="1-统一日志格式"><a href="#1-统一日志格式" class="headerlink" title="1. 统一日志格式"></a>1. 统一日志格式</h3><p>确保所有服务使用统一的日志格式，这样可以简化日志的解析和查询。JSON 是一种常用的格式，因为它结构化且易于解析。</p><p><strong>示例</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-07-20T12:34:56Z&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;service&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user-service&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;User logged in&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;12345&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-使用一致的日志级别"><a href="#2-使用一致的日志级别" class="headerlink" title="2. 使用一致的日志级别"></a>2. 使用一致的日志级别</h3><p>定义并使用一致的日志级别，例如：<code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>FATAL</code>。确保所有服务在记录日志时使用这些级别。</p><h3 id="3-标准化日志字段"><a href="#3-标准化日志字段" class="headerlink" title="3. 标准化日志字段"></a>3. 标准化日志字段</h3><p>定义一组标准化的日志字段，包括但不限于：</p><ul><li><code>timestamp</code>: 记录时间</li><li><code>level</code>: 日志级别</li><li><code>service</code>: 服务名称</li><li><code>message</code>: 日志信息</li><li><code>context</code>: 其他上下文信息，如用户ID、请求ID等</li></ul><h3 id="4-集成-Loki-客户端库"><a href="#4-集成-Loki-客户端库" class="headerlink" title="4. 集成 Loki 客户端库"></a>4. 集成 Loki 客户端库</h3><p>在服务中集成 Loki 客户端库，以便直接将日志推送到 Loki。以下是一个使用 Go 的示例，展示了如何集成 Loki 客户端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/grafana/loki-client-go/loki&quot;</span><br>    <span class="hljs-string">&quot;github.com/grafana/loki-client-go/loki/api&quot;</span><br>    <span class="hljs-string">&quot;github.com/grafana/loki-client-go/loki/config&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    cfg := config.Config&#123;<br>        URL:       <span class="hljs-string">&quot;http://localhost:3100/api/prom/push&quot;</span>,<br>        BatchWait: <span class="hljs-number">5</span> * time.Second,<br>        BatchSize: <span class="hljs-number">100</span> * <span class="hljs-number">1024</span>,<br>    &#125;<br>    client, err := loki.NewWithLogger(cfg, log.New())<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatalf(<span class="hljs-string">&quot;failed to create loki client: %v&quot;</span>, err)<br>    &#125;<br><br>    <span class="hljs-keyword">defer</span> client.Stop()<br><br>    logger := client.Log(<br>        loki.Labels&#123;<span class="hljs-string">&quot;service&quot;</span>: <span class="hljs-string">&quot;user-service&quot;</span>&#125;,<br>        api.Entry&#123;Timestamp: time.Now(), Line: <span class="hljs-string">`&#123;&quot;level&quot;: &quot;info&quot;, &quot;message&quot;: &quot;User logged in&quot;, &quot;userId&quot;: &quot;12345&quot;&#125;`</span>&#125;,<br>    )<br>    fmt.Println(<span class="hljs-string">&quot;Log sent:&quot;</span>, logger)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-使用集中式日志收集代理"><a href="#5-使用集中式日志收集代理" class="headerlink" title="5. 使用集中式日志收集代理"></a>5. 使用集中式日志收集代理</h3><p>使用集中式日志收集代理（如 Promtail）将日志从各个服务收集并推送到 Loki。Promtail 可以配置为收集不同来源的日志（如文件、系统日志）并添加适当的标签。</p><p><strong>Promtail 配置示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">http_listen_port:</span> <span class="hljs-number">9080</span><br>  <span class="hljs-attr">grpc_listen_port:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">positions:</span><br>  <span class="hljs-attr">filename:</span> <span class="hljs-string">/var/log/positions.yaml</span><br><br><span class="hljs-attr">clients:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">http://localhost:3100/loki/api/v1/push</span><br><br><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">system</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">localhost</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">job:</span> <span class="hljs-string">varlogs</span><br>          <span class="hljs-attr">__path__:</span> <span class="hljs-string">/var/log/*.log</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">services</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">localhost</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">job:</span> <span class="hljs-string">services</span><br>          <span class="hljs-attr">__path__:</span> <span class="hljs-string">/path/to/your/service/logs/*.log</span><br></code></pre></td></tr></table></figure><h3 id="6-添加上下文信息"><a href="#6-添加上下文信息" class="headerlink" title="6. 添加上下文信息"></a>6. 添加上下文信息</h3><p>确保日志包含足够的上下文信息，以便于调试。例如，可以添加请求ID、用户ID等信息，使得关联多个服务的日志变得容易。</p><h3 id="7-监控和报警"><a href="#7-监控和报警" class="headerlink" title="7. 监控和报警"></a>7. 监控和报警</h3><p>使用 Grafana 监控 Loki 中的日志，并设置适当的报警规则。例如，可以监控错误日志的数量，如果错误日志在一段时间内超过某个阈值，触发报警。</p><h3 id="8-安全和隐私"><a href="#8-安全和隐私" class="headerlink" title="8. 安全和隐私"></a>8. 安全和隐私</h3><p>确保日志中不包含敏感信息，如密码、信用卡号等。如果需要记录敏感操作，考虑将敏感信息进行脱敏处理。</p><h3 id="9-日志保留策略"><a href="#9-日志保留策略" class="headerlink" title="9. 日志保留策略"></a>9. 日志保留策略</h3><p>根据业务需求和法规要求，制定日志保留策略。Loki 支持日志的分片和存储策略，可以根据需要配置日志的保留期限和存储位置。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在复杂的软件架构中实现日志收集的标准化是一个持续的过程，需要不断调整和优化。通过统一日志格式、使用一致的日志级别、集成 Loki 客户端库、使用集中式日志收集代理以及添加上下文信息，可以有效提升日志管理的效率和质量。</p>]]></content>
    
    
    <categories>
      
      <category>日志系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>日志系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-Loki-Promtail-grafana解决方案</title>
    <link href="/2024/07/27/03-Loki-Promtail-grafana%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/07/27/03-Loki-Promtail-grafana%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Loki-Promtail-grafana解决方案"><a href="#Loki-Promtail-grafana解决方案" class="headerlink" title="Loki-Promtail-grafana解决方案"></a>Loki-Promtail-grafana解决方案</h1><h2 id="一-什么是Loki日志系统？"><a href="#一-什么是Loki日志系统？" class="headerlink" title="一. 什么是Loki日志系统？"></a>一. 什么是Loki日志系统？</h2><p>Loki是受Prometheus启发由Grafana Labs团队开源的水平可扩展，高度可用的多租户日志聚合系统。 开发语言: Google Go。它的设计具有很高的成本效益，并且易于操作。使用标签来作为索引，而不是对全文进行检索，也就是说，你通过这些标签既可以查询日志的内容也可以查询到监控的数据签，极大地降低了日志索引的存储。系统架构十分简单，由以下3个部分组成 ：</p><ul><li>Loki 是主服务器，负责存储日志和处理查询 ；</li><li>promtail 是代理，负责收集日志并将其发送给 loki；</li><li>Grafana 用于 UI 展示；</li></ul><p>官方文档集合： </p><ul><li><a href="https://grafana.com/docs/loki/latest/">https://grafana.com/docs/loki/latest/</a></li><li><a href="https://github.com/grafana/loki/releases">https://github.com/grafana/loki/releases</a></li></ul><h1 id="Loki-Promtail-grafana解决方案-1"><a href="#Loki-Promtail-grafana解决方案-1" class="headerlink" title="Loki-Promtail-grafana解决方案"></a>Loki-Promtail-grafana解决方案</h1><h2 id="一-什么是Loki日志系统？-1"><a href="#一-什么是Loki日志系统？-1" class="headerlink" title="一. 什么是Loki日志系统？"></a>一. 什么是Loki日志系统？</h2><p>Loki是受Prometheus启发由Grafana Labs团队开源的水平可扩展，高度可用的多租户日志聚合系统。 开发语言: Google Go。它的设计具有很高的成本效益，并且易于操作。使用标签来作为索引，而不是对全文进行检索，也就是说，你通过这些标签既可以查询日志的内容也可以查询到监控的数据签，极大地降低了日志索引的存储。系统架构十分简单，由以下3个部分组成 ：</p><ul><li>Loki 是主服务器，负责存储日志和处理查询 ；</li><li>promtail 是代理，负责收集日志并将其发送给 loki；</li><li>Grafana 用于 UI 展示；</li></ul><p>官方文档集合： </p><ul><li><a href="https://grafana.com/docs/loki/latest/">https://grafana.com/docs/loki/latest/</a></li><li><a href="https://github.com/grafana/loki/releases">https://github.com/grafana/loki/releases</a></li></ul><h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><p>由于当前的docker方式比较方便，就使用此方法部署所有服务，但是所有的数据都会放在我们本地磁盘，它虽然支持外部存储，但是当前使用磁盘的方式是完全能支撑当前业务的</p><h1 id="loki部署"><a href="#loki部署" class="headerlink" title="loki部署"></a>loki部署</h1><ul><li><p>创建数据对接目录，配置文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>$ <span class="hljs-built_in">mkdir</span> -p /data/loki/config<br>$ vim /data/loki/config/loki-local-config.yaml<br>auth_enabled: <span class="hljs-literal">false</span><br><br>server:<br>  http_listen_port: 3100<br>  grpc_listen_port: 9096<br>  log_level: debug<br>  grpc_server_max_concurrent_streams: 1000<br><br>common:<br>  instance_addr: 127.0.0.1<br>  path_prefix: /tmp/loki<br>  replication_factor: 1<br>  ring:<br>    kvstore:<br>      store: inmemory<br><br>ingester:<br>  lifecycler:<br>    address: 127.0.0.1<br>    ring:<br>      kvstore:<br>        store: inmemory<br>      replication_factor: 1<br>    final_sleep: 0s<br>  chunk_idle_period: 3m<br>  chunk_retain_period: 1m<br><br>schema_config:<br>  configs:<br>    - from: 2020-10-24<br>      store: boltdb-shipper<br>      object_store: filesystem<br>      schema: v11<br>      index:<br>        prefix: index_<br>        period: 24h<br><br>storage_config:<br>  boltdb_shipper:<br>    active_index_directory: /tmp/loki/index<br>    cache_location: /tmp/loki/boltdb-cache<br>  filesystem:<br>    directory: /tmp/loki/chunks<br><br>query_range:<br>  results_cache:<br>    cache:<br>      embedded_cache:<br>        enabled: <span class="hljs-literal">true</span><br>        max_size_mb: 100<br><br>limits_config:<br>  reject_old_samples: <span class="hljs-literal">true</span><br>  reject_old_samples_max_age: 168h<br>  allow_structured_metadata: <span class="hljs-literal">false</span><br><br>ruler:<br>  alertmanager_url: http://alertmanager-server:9093<br><br>frontend:<br>  encoding: protobuf<br><br></code></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker run --name loki -itd -v /data/loki/config:/mnt/config -v  /data/loki/data:/tmp/loki -p 3100:3100 grafana/loki:3.0.0 -config.file=/mnt/config/loki-local-config.yaml<br>$ docker logs -f loki<br><span class="hljs-comment">#日志 根据这个日志来判断是否成功</span><br>a\\x05\\n\\x0e127.0.0.1:909\&quot;<span class="hljs-string">&quot;</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:13.664293471Z caller=mock.go:196 msg=Get key=collectors/distributor modify_index=359 value=&quot;</span>\&quot;@\\xf0?\\n&gt;\\n\\f57b9c947660b\\x12.\\n\\v127.0.0.1:0\\x10\\xb2\\x99\\x9d\\xb5\\x06\&quot;<span class="hljs-string">&quot;</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:13.664310571Z caller=mock.go:123 msg=CAS key=collectors/distributor modify_index=359 value=&quot;</span>\&quot;@\\xf0?\\n&gt;\\n\\f57b9c947660b\\x12.\\n\\v127.0.0.1:0\\x10\\xc1\\x99\\x9d\\xb5\\x06\&quot;<span class="hljs-string">&quot;</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:13.664342389Z caller=mock.go:196 msg=Get key=collectors/ring modify_index=365 value=&quot;</span>\&quot;\\xbe\\x05\\xf4\\xbd\\x02\\n\\xbb\\x05\\n\\f57b9c947660b\\x12\\xaa\\x05\\n\\x0e127.0.0.1:909\&quot;<span class="hljs-string">&quot;</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:13.664366901Z caller=mock.go:150 msg=Get key=collectors/ring wait_index=365</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:13.664375842Z caller=mock.go:196 msg=Get key=collectors/distributor modify_index=364 value=&quot;</span>\&quot;@\\xf0?\\n&gt;\\n\\f57b9c947660b\\x12.\\n\\v127.0.0.1:0\\x10\\xc1\\x99\\x9d\\xb5\\x06\&quot;<span class="hljs-string">&quot;</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:13.66439852Z caller=mock.go:150 msg=Get key=collectors/distributor wait_index=364</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:13.664645622Z caller=checkpoint.go:377 msg=&quot;</span>writing series<span class="hljs-string">&quot; size=&quot;</span>27 kB<span class="hljs-string">&quot;</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:15.566547742Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/compactor</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:15.566603604Z caller=mock.go:150 msg=Get key=collectors/compactor wait_index=362</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:15.566617988Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/scheduler</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:15.56662861Z caller=mock.go:150 msg=Get key=collectors/scheduler wait_index=363</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:15.566633969Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/ring</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:15.566640456Z caller=mock.go:150 msg=Get key=collectors/ring wait_index=365</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:15.566645423Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/distributor</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:15.566651684Z caller=mock.go:150 msg=Get key=collectors/distributor wait_index=364</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:16.566642831Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/scheduler</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:16.566688706Z caller=mock.go:150 msg=Get key=collectors/scheduler wait_index=363</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:16.566702546Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/distributor</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:16.566710855Z caller=mock.go:150 msg=Get key=collectors/distributor wait_index=364</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:16.566715888Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/ring</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:16.566722651Z caller=mock.go:150 msg=Get key=collectors/ring wait_index=365</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:16.566727563Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/compactor</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:16.566734137Z caller=mock.go:150 msg=Get key=collectors/compactor wait_index=362</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:17.567402618Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/distributor</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:17.567447831Z caller=mock.go:150 msg=Get key=collectors/distributor wait_index=364</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:17.567462666Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/compactor</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:17.567471279Z caller=mock.go:150 msg=Get key=collectors/compactor wait_index=362</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:17.56747655Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/ring</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:17.567485535Z caller=mock.go:150 msg=Get key=collectors/ring wait_index=365</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:17.567490342Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/scheduler</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:17.567498805Z caller=mock.go:150 msg=Get key=collectors/scheduler wait_index=363</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:18.568446535Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/scheduler</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:18.568491873Z caller=mock.go:150 msg=Get key=collectors/scheduler wait_index=363</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:18.568505616Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/compactor</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:18.568513289Z caller=mock.go:150 msg=Get key=collectors/compactor wait_index=362</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:18.568519284Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/distributor</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:18.568530122Z caller=mock.go:150 msg=Get key=collectors/distributor wait_index=364</span><br><span class="hljs-string">level=debug ts=2024-07-29T08:03:18.568534887Z caller=mock.go:186 msg=&quot;</span>Get - deadline exceeded<span class="hljs-string">&quot; key=collectors/ring</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure></li></ul><h1 id="Promtail部署"><a href="#Promtail部署" class="headerlink" title="Promtail部署"></a>Promtail部署</h1><ul><li><p>创建数据对接目录，配置文件创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">mkdir</span> -p /data/promtail/log<br>$ <span class="hljs-built_in">mkdir</span> -p /data/promtail/config<br><br><span class="hljs-comment"># 配置文件编写 </span><br>$ vim /data/promtail/config/promtail-config.yaml<br>server:<br>  http_listen_port: 9080<br>  grpc_listen_port: 0<br><br>positions:<br>  filename: /tmp/positions.yaml<br><br>clients:<br>  - url: http://loki-server:3100/loki/api/v1/push<br><br>scrape_configs:<br>- job_name: system<br>  static_configs:<br>  - targets:<br>      - localhost<br>    labels:<br>      job: varlogs<br>      __path__: /var/log/*<span class="hljs-built_in">log</span><br><br></code></pre></td></tr></table></figure></li><li><p>配置说明</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">loki服务端信息</span><br>  <span class="hljs-attribute">http_listen_port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">9080</span><br>  <span class="hljs-attribute">grpc_listen_port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br><br><span class="hljs-attribute">positions</span><span class="hljs-punctuation">:</span> <span class="hljs-string">日志位点配置</span><br>  <span class="hljs-attribute">filename</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/tmp/positions.yaml</span><br><br><span class="hljs-attribute">clients</span><span class="hljs-punctuation">:</span> <span class="hljs-string">连接推送地址</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">url: http://43.138.148.108:3100/loki/api/v1/push</span><br><br><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">配置日志目标</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">job_name: system job名称</span><br>  <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">静态配置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">targets: ，目标 这里是ip地址 </span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">job</span><span class="hljs-punctuation">:</span> <span class="hljs-string">varlogs  任务具体名称，这里可以在grafana中搜索的key</span><br>      <span class="hljs-attribute">__path__</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/var/log/*log 采集日志路径 如果是容器安装 则需要这个日志目录映射到这里去</span><br></code></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker run --name promtail -itd -v /data/promtail/config:/mnt/promtail/config -v /var/log:/var/log --<span class="hljs-built_in">link</span> loki grafana/promtail:3.0.0 -config.file=/mnt/promtail/config/promtail-config.yaml<br>$ docker logs -f promaail<br>level=info ts=2024-07-29T07:42:18.381823421Z <span class="hljs-built_in">caller</span>=main.go:173 msg=<span class="hljs-string">&quot;Starting Promtail&quot;</span> version=<span class="hljs-string">&quot;(version=3.0.0, branch=HEAD, revision=b4f7181c7a)&quot;</span><br>level=warn ts=2024-07-29T07:42:18.381894145Z <span class="hljs-built_in">caller</span>=promtail.go:263 msg=<span class="hljs-string">&quot;enable watchConfig&quot;</span><br>level=info ts=2024-07-29T07:42:23.38218856Z <span class="hljs-built_in">caller</span>=filetargetmanager.go:372 msg=<span class="hljs-string">&quot;Adding target&quot;</span> key=<span class="hljs-string">&quot;/var/log/*log:&#123;job=\&quot;varlogs\&quot;&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.382560226Z <span class="hljs-built_in">caller</span>=filetarget.go:313 msg=<span class="hljs-string">&quot;watching new directory&quot;</span> directory=/var/log<br>level=info ts=2024-07-29T07:42:23.382660349Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/alternatives.log<br>ts=2024-07-29T07:42:23.382789034Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/alternatives.log - &amp;&#123;Offset:523 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.382837357Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/boot.log<br>ts=2024-07-29T07:42:23.382876226Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/apport.log - &amp;&#123;Offset:0 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.382900218Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/apport.log<br>ts=2024-07-29T07:42:23.382948055Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/auth.log - &amp;&#123;Offset:928671 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.3829814Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/auth.log<br>ts=2024-07-29T07:42:23.383047145Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/boot.log - &amp;&#123;Offset:0 Whence:0&#125;&quot;</span><br>ts=2024-07-29T07:42:23.383182513Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/bootstrap.log - &amp;&#123;Offset:1 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.383209434Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/bootstrap.log<br>ts=2024-07-29T07:42:23.383246407Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/cloud-init-output.log - &amp;&#123;Offset:0 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.383266454Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/cloud-init-output.log<br>ts=2024-07-29T07:42:23.383313745Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/cloud-init.log - &amp;&#123;Offset:0 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.383338109Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/cloud-init.log<br>ts=2024-07-29T07:42:23.383413506Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/dpkg.log - &amp;&#123;Offset:19158 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.383450172Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/dpkg.log<br>ts=2024-07-29T07:42:23.383484052Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/faillog - &amp;&#123;Offset:1 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.383508679Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/faillog<br>level=info ts=2024-07-29T07:42:23.383532327Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/kern.log<br>ts=2024-07-29T07:42:23.383540774Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/kern.log - &amp;&#123;Offset:24219 Whence:0&#125;&quot;</span><br>ts=2024-07-29T07:42:23.383580412Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/lastlog - &amp;&#123;Offset:1 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.383672283Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/qcloud_action.log<br>ts=2024-07-29T07:42:23.383726678Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/syslog - &amp;&#123;Offset:910823 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.384220433Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/lastlog<br>ts=2024-07-29T07:42:23.384256885Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/qcloud_action.log - &amp;&#123;Offset:1 Whence:0&#125;&quot;</span><br>ts=2024-07-29T07:42:23.384323099Z <span class="hljs-built_in">caller</span>=log.go:168 level=info msg=<span class="hljs-string">&quot;Seeked /var/log/ubuntu-advantage.log - &amp;&#123;Offset:10705 Whence:0&#125;&quot;</span><br>level=info ts=2024-07-29T07:42:23.384358424Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/syslog<br>level=info ts=2024-07-29T07:42:23.384368549Z <span class="hljs-built_in">caller</span>=tailer.go:147 component=tailer msg=<span class="hljs-string">&quot;tail routine: started&quot;</span> path=/var/log/ubuntu-advantage.log<br><br></code></pre></td></tr></table></figure></li></ul><p>目前看日志都正常，到此都是顺利的，接下来我们去配置看板即可</p><h1 id="grafana配置"><a href="#grafana配置" class="headerlink" title="grafana配置"></a>grafana配置</h1><p>这里部署比较简单，搭建根据之前的prometheus文件的grafana参考即可</p><ul><li><p><a href="https://vlog.aiwanfps.com/2024/07/25/04-grafana%E9%83%A8%E7%BD%B2%E5%AF%B9%E6%8E%A5/">https://vlog.aiwanfps.com/2024/07/25/04-grafana%E9%83%A8%E7%BD%B2%E5%AF%B9%E6%8E%A5/</a></p></li><li><p>添加数据源<br>  grafana 中添加数据源，选择loki</p></li><li><p>添加面板<br>  导入面板 DI为：13639</p></li><li><p>查看日志信息</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>日志系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>日志系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-EFK解决方案</title>
    <link href="/2024/07/27/02-EFK%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/07/27/02-EFK%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h1 id="什么是EFK？"><a href="#什么是EFK？" class="headerlink" title="什么是EFK？"></a>什么是EFK？</h1><p>EFK 是一种流行的开源日志解决方案，涵盖了日志收集、处理和可视化等功能。EFK 由以下三个核心组件组成：</p><ul><li><strong>Elasticsearch</strong>：一个分布式搜索和分析引擎，用于存储、检索和管理日志数据。</li><li><strong>Fluentd</strong>：一个开源的数据收集器，用于统一日志数据的收集、处理和转发。</li><li><strong>Kibana</strong>：一个开源的分析和可视化平台，用于在图形界面中展示和分析 Elasticsearch 中存储的数据。</li></ul><p>EFK 组合提供了一个强大的工具集，帮助开发人员和运维人员实时监控和分析系统日志，从而快速定位问题、优化系统性能。</p><h1 id="技术框架和原理"><a href="#技术框架和原理" class="headerlink" title="技术框架和原理"></a>技术框架和原理</h1><h2 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h2><ol><li><strong>Fluentd</strong>：作为日志收集器，Fluentd 从各种数据源（如应用日志、系统日志等）中收集日志数据，并将其转发到 Elasticsearch 中进行存储。</li><li><strong>Elasticsearch</strong>：作为核心存储和搜索引擎，Elasticsearch 接收 Fluentd 发送的日志数据，进行索引和存储。它支持强大的全文搜索和实时分析功能。</li><li><strong>Kibana</strong>：作为可视化工具，Kibana 连接到 Elasticsearch，提供丰富的图表和仪表盘，使用户能够直观地查看和分析日志数据。</li></ol><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol><li><strong>日志收集</strong>：Fluentd 从各种来源（如文件、Syslog、应用程序等）收集日志数据。</li><li><strong>日志处理</strong>：Fluentd 可以对收集到的日志数据进行过滤、解析和格式化等处理。</li><li><strong>日志存储</strong>：处理后的日志数据通过 Fluentd 被发送到 Elasticsearch 中进行索引和存储。</li><li><strong>日志可视化</strong>：用户可以通过 Kibana 连接到 Elasticsearch，创建和定制各种图表和仪表盘，实时监控和分析日志数据。</li></ol><h1 id="在裸金属服务器中部署搭建"><a href="#在裸金属服务器中部署搭建" class="headerlink" title="在裸金属服务器中部署搭建"></a>在裸金属服务器中部署搭建</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li>安装 Java（Elasticsearch 依赖）</li><li>安装 Elasticsearch</li><li>安装 Fluentd</li><li>安装 Kibana</li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p><strong>安装 Java</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install openjdk-11-jdk<br></code></pre></td></tr></table></figure></li><li><p><strong>安装 Elasticsearch</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | <span class="hljs-built_in">sudo</span> apt-key add -<br><span class="hljs-built_in">sudo</span> sh -c <span class="hljs-string">&#x27;echo &quot;deb https://artifacts.elastic.co/packages/7.x/apt stable main&quot; &gt; /etc/apt/sources.list.d/elastic-7.x.list&#x27;</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install elasticsearch<br><span class="hljs-built_in">sudo</span> systemctl start elasticsearch<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> elasticsearch<br></code></pre></td></tr></table></figure></li><li><p><strong>安装 Fluentd</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -L https://td-toolbelt.herokuapp.com/sh/install-ubuntu-bionic-td-agent2.sh | sh<br><span class="hljs-built_in">sudo</span> systemctl start td-agent<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> td-agent<br></code></pre></td></tr></table></figure></li><li><p><strong>安装 Kibana</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install kibana<br><span class="hljs-built_in">sudo</span> systemctl start kibana<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> kibana<br></code></pre></td></tr></table></figure></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><strong>Elasticsearch 配置</strong>：编辑 <code>/etc/elasticsearch/elasticsearch.yml</code> 进行必要的配置。</li><li><strong>Fluentd 配置</strong>：编辑 <code>/etc/td-agent/td-agent.conf</code> 进行日志输入和输出配置。</li><li><strong>Kibana 配置</strong>：编辑 <code>/etc/kibana/kibana.yml</code> 配置 Elasticsearch 地址。</li></ol><h1 id="在编排系统中搭建"><a href="#在编排系统中搭建" class="headerlink" title="在编排系统中搭建"></a>在编排系统中搭建</h1><h2 id="使用-Docker-部署"><a href="#使用-Docker-部署" class="headerlink" title="使用 Docker 部署"></a>使用 Docker 部署</h2><ol><li><p><strong>创建 Docker 网络</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create efk<br></code></pre></td></tr></table></figure></li><li><p><strong>启动 Elasticsearch</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name elasticsearch --net efk -p 9200:9200 -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.10.1<br></code></pre></td></tr></table></figure></li><li><p><strong>启动 Fluentd</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name fluentd --net efk -p 24224:24224 -p 24224:24224/udp -v /path/to/fluentd/conf:/fluentd/etc fluent/fluentd<br></code></pre></td></tr></table></figure></li><li><p><strong>启动 Kibana</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name kibana --net efk -p 5601:5601 kibana:7.10.1<br></code></pre></td></tr></table></figure></li></ol><h2 id="使用-Kubernetes-部署"><a href="#使用-Kubernetes-部署" class="headerlink" title="使用 Kubernetes 部署"></a>使用 Kubernetes 部署</h2><ol><li><p><strong>创建命名空间</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create namespace efk<br></code></pre></td></tr></table></figure></li><li><p><strong>部署 Elasticsearch</strong>：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.10.1</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9200</span><br></code></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f elasticsearch-deployment.yaml<br></code></pre></td></tr></table></figure></li><li><p><strong>部署 Fluentd</strong>：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">fluentd</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">fluentd</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">fluent/fluentd</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">24224</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">24224</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br></code></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f fluentd-deployment.yaml<br></code></pre></td></tr></table></figure></li><li><p><strong>部署 Kibana</strong>：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">kibana:7.10.1</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">5601</span><br></code></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f kibana-deployment.yaml<br></code></pre></td></tr></table></figure></li></ol><h1 id="挑战和问题"><a href="#挑战和问题" class="headerlink" title="挑战和问题"></a>挑战和问题</h1><ol><li><strong>性能瓶颈</strong>：在高并发和大数据量的情况下，Elasticsearch 的性能可能成为瓶颈，需要进行性能优化和集群扩展。</li><li><strong>日志丢失</strong>：Fluentd 在高负载情况下可能会出现日志丢失的情况，需要配置可靠的缓冲机制。</li><li><strong>安全性</strong>：EFK 堆栈需要考虑日志数据的安全性，包括数据传输加密、访问控制等。</li><li><strong>复杂性</strong>：EFK 的部署和管理涉及多个组件的配置和调优，需要一定的技术经验和运维能力。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>EFK 是一种强大的开源日志解决方案，能够帮助开发人员和运维人员实时监控和分析系统日志。通过合理的部署和配置，EFK 可以显著提高系统的可观测性和问题排查效率。然而，EFK 的部署和管理也面临一些挑战，需要充分考虑性能、安全性和系统复杂性等方面的问题。</p>]]></content>
    
    
    <categories>
      
      <category>日志系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>监控</tag>
      
      <tag>日志系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-日志解决方案分析</title>
    <link href="/2024/07/27/01-%E6%97%A5%E5%BF%97%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/27/01-%E6%97%A5%E5%BF%97%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h1 id="日志及解决方案"><a href="#日志及解决方案" class="headerlink" title="日志及解决方案"></a>日志及解决方案</h1><h2 id="1-日志是什么？"><a href="#1-日志是什么？" class="headerlink" title="1 日志是什么？"></a>1 日志是什么？</h2><p>随着计算机技术的发展，各种硬件设备（如汽车、家用电器、个人电脑、服务器、云主机、手机等）和软件系统（如Linux、Windows、macOS，以及各类软件平台、手机应用、电子游戏等）都记录着各自的运行日志。这些日志从最初的功能实现到现在的规范化，形成了系统日志、软件日志等多种形式。例如，系统日志通常位于 <code>/var/log/</code> 目录下，而软件日志则可能位于 <code>/var/log/软件名/access.log</code>，手机应用的运行日志则存储在手机的内置目录中。</p><p>当一个系统或软件出现错误时，如果没有日志记录，维护人员如同在开盲盒一般，难以确定问题所在。因此，各系统和平台都规范了日志的存储方式，以便于问题排查和系统维护。</p><h3 id="1-1-Linux"><a href="#1-1-Linux" class="headerlink" title="1.1 Linux"></a>1.1 Linux</h3><p>在 Linux 系统中，日志文件通常位于 <code>/var/log</code> 目录下。常见的日志文件包括：</p><ul><li><code>/var/log/syslog</code> 或 <code>/var/log/messages</code>：系统日志文件，记录系统相关的事件。</li><li><code>/var/log/auth.log</code> 或 <code>/var/log/secure</code>：认证和授权相关的日志文件。</li><li><code>/var/log/kern.log</code>：内核日志文件。</li><li><code>/var/log/dmesg</code>：系统启动时的消息。</li><li><code>/var/log/daemon.log</code>：守护进程的日志文件。</li></ul><h3 id="1-2-Windows"><a href="#1-2-Windows" class="headerlink" title="1.2 Windows"></a>1.2 Windows</h3><p>在 Windows 系统中，日志信息通常通过事件查看器来管理，存储在以下路径：</p><ul><li><code>C:\Windows\System32\Winevt\Logs</code>：事件日志文件，主要分为系统日志、应用日志和安全日志等。</li></ul><p>要查看 Windows 日志，可以通过事件查看器（Event Viewer）进行访问：</p><ol><li>按 <code>Win + R</code> 打开运行对话框。</li><li>输入 <code>eventvwr</code> 并回车，打开事件查看器。</li><li>在事件查看器中，你可以查看系统日志、应用程序日志、安全日志等。</li></ol><h3 id="1-3-macOS"><a href="#1-3-macOS" class="headerlink" title="1.3 macOS"></a>1.3 macOS</h3><p>在 macOS 系统中，日志文件通常位于 <code>/var/log</code> 和 <code>/Library/Logs</code> 目录下。常见的日志文件包括：</p><ul><li><code>/var/log/system.log</code>：系统日志文件。</li><li><code>/var/log/kernel.log</code>：内核日志文件。</li><li><code>/Library/Logs</code>：应用程序日志文件，macOS 系统和第三方应用的日志文件一般存放在这里。</li></ul><p>此外，可以通过 Console 应用查看日志：</p><ol><li>打开 Finder。</li><li>选择 “Applications”（应用程序）。</li><li>打开 “Utilities”（实用工具）文件夹。</li><li>运行 “Console”（控制台）应用。</li></ol><p><strong>其他设备（如手机、家电等）根据所使用的系统不同，99%都基于 Linux 底层，因此也遵循 Linux 的日志标准。</strong></p><h2 id="2-日志解决方案的价值"><a href="#2-日志解决方案的价值" class="headerlink" title="2 日志解决方案的价值"></a>2 日志解决方案的价值</h2><p>随着软件和系统复杂性的增加，如果没有规范的日志存放和管理，查询日志将变得非常困难，浪费时间。在业务系统中，这会严重影响效率。因此，日志系统的最直接价值在于提供方便的查询和检索，提速增效。</p><p>日志解决方案的诞生意味着日志平台逐渐走向成熟和完善，系统的复杂度也在增加。以下是日志明显增效的场景：</p><ul><li>事件监控</li><li>错误处理&#x2F;排查</li><li>SRE根因定位</li><li>快速了解服务状态</li></ul><h2 id="3-技术原理"><a href="#3-技术原理" class="headerlink" title="3. 技术原理"></a>3. 技术原理</h2><p>日志通过系统或自研服务生成，这些日志信息记录了代码处理数据逻辑的过程。日志信息通过特定方法读取或按照规则导入到日志系统的存储中，然后日志系统通过定义的规则解析并展示在前端面板页面中。</p><h3 id="3-1-技术工具"><a href="#3-1-技术工具" class="headerlink" title="3.1 技术工具"></a>3.1 技术工具</h3><p>常用的日志处理工具包括：</p><ul><li>Elasticsearch</li><li>Logstash</li><li>Fluentd</li><li>Kibana</li><li>Loki</li><li>Filebeat</li></ul><h3 id="3-2-主流方案"><a href="#3-2-主流方案" class="headerlink" title="3.2 主流方案"></a>3.2 主流方案</h3><p>这些工具具备日志检索、存储、收集对接等功能。组合这些组件即可形成开源的日志解决方案。目前主流的方案有：</p><ul><li>EFK（Elasticsearch + Fluentd + Kibana）</li><li>ELK（Elasticsearch + Logstash + Kibana）</li><li>LFG（Loki + Fluentd + Grafana）</li></ul><h2 id="4-当前符合的解决方案"><a href="#4-当前符合的解决方案" class="headerlink" title="4. 当前符合的解决方案"></a>4. 当前符合的解决方案</h2><p>由于我们还在核心开发阶段，日志量较小，因此选择轻量级的日志解决方案。经过评估，选择如下方案：</p><ul><li>Loki：日志引擎</li><li>Fluentd：日志收集对接</li><li>Grafana：日志展示</li></ul>]]></content>
    
    
    <categories>
      
      <category>日志系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>监控</tag>
      
      <tag>日志系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-我与证书有个约会</title>
    <link href="/2024/07/26/01-%E6%88%91%E4%B8%8E%E8%AF%81%E4%B9%A6%E6%9C%89%E4%B8%AA%E7%BA%A6%E4%BC%9A/"/>
    <url>/2024/07/26/01-%E6%88%91%E4%B8%8E%E8%AF%81%E4%B9%A6%E6%9C%89%E4%B8%AA%E7%BA%A6%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="一-SSL-TLS证书是什么？"><a href="#一-SSL-TLS证书是什么？" class="headerlink" title="一. SSL&#x2F;TLS证书是什么？"></a>一. SSL&#x2F;TLS证书是什么？</h2><p>SSL（Secure Sockets Layer）和TLS（Transport Layer Security）证书是确保互联网通信安全的关键。它们通过加密数据传输，确保在浏览器和服务器之间传输的信息不被截获和篡改。想象一下，我们在一个咖啡店里上网，输入了银行的登录信息，如果没有SSL&#x2F;TLS证书，黑客可以轻易作为中间人截取这些信息。SSL&#x2F;TLS证书就像是保护您信息安全的隐形保镖，为您的在线活动保驾护航，此时黑客截取到数据是加密的，无法得到明文信息。</p><h2 id="二-什么情况下会使用到证书"><a href="#二-什么情况下会使用到证书" class="headerlink" title="二. 什么情况下会使用到证书"></a>二. 什么情况下会使用到证书</h2><p>SSL&#x2F;TLS证书在许多场景下都至关重要。任何涉及敏感信息的传输都需要SSL&#x2F;TLS证书。例如：</p><ol><li><strong>电子商务网站</strong>：在购物过程中保护客户的支付信息。</li><li><strong>银行和金融机构</strong>：保障用户的财务数据。</li><li><strong>电子邮件服务器</strong>：确保邮件传输的安全性。</li><li><strong>企业内部系统</strong>：保护内部数据免受外部威胁。</li><li><strong>社交媒体平台</strong>：保护用户的个人数据和隐私。</li></ol><p>总之，任何需要保护数据隐私和完整性的场景都需要SSL&#x2F;TLS证书。</p><h2 id="三-证书的种类"><a href="#三-证书的种类" class="headerlink" title="三. 证书的种类"></a>三. 证书的种类</h2><p>根据验证程度和应用场景，SSL&#x2F;TLS证书可以分为几类：</p><ol><li><strong>域名验证（DV）证书</strong>：只验证域名所有权，适用于小型网站。</li><li><strong>企业验证（OV）证书</strong>：除了域名，还验证企业身份，适用于中型企业。</li><li><strong>扩展验证（EV）证书</strong>：最严格的验证，包括企业的法律和运营信息，适用于需要最高信任度的网站。</li><li><strong>通配符证书</strong>：保护一个域名及其所有子域名，方便管理多个子域名的网站。</li><li><strong>多域名证书</strong>：允许保护多个不同域名，适用于拥有多个网站的企业。</li></ol><h2 id="四-技术原理是？"><a href="#四-技术原理是？" class="headerlink" title="四. 技术原理是？"></a>四. 技术原理是？</h2><p>SSL&#x2F;TLS证书的核心原理是加密和身份验证。浏览器与服务器之间建立安全连接的过程如下：</p><ol><li><strong>握手协议</strong>：客户端和服务器通过握手协议交换加密算法和密钥信息。</li><li><strong>服务器证书验证</strong>：客户端验证服务器提供的SSL&#x2F;TLS证书的真实性。</li><li><strong>对称加密密钥生成</strong>：客户端和服务器使用非对称加密生成对称加密密钥，用于数据传输加密。</li><li><strong>安全通信</strong>：使用对称加密密钥加密传输的数据，确保数据的机密性和完整性。</li></ol><h2 id="五-加密算法"><a href="#五-加密算法" class="headerlink" title="五.加密算法"></a>五.加密算法</h2><p>SSL&#x2F;TLS协议使用多种加密算法，包括对称加密、非对称加密和哈希算法：</p><ol><li><strong>对称加密</strong>：如AES，使用同一个密钥进行加密和解密，速度快，适合大数据量传输。</li><li><strong>非对称加密</strong>：如RSA，使用公钥加密，私钥解密，安全性高，用于密钥交换。</li><li><strong>哈希算法</strong>：如SHA，用于生成数据摘要，确保数据的完整性。</li><li><strong>国密算法（单独列出来）</strong>：国密算法是中国自主研发创新的一套数据加密处理系列算法。从SM1-SM4分别实现了对称、非对称、摘要等算法功能。密钥长度和分组长度均为128位<ul><li>SM1：为对称加密。其加密强度与AES相当。该算法不公开，调用该算法时，需要通过加密芯片的接口进行调用。</li><li>SM2：非对称加密，基于ECC(椭圆加密算法)。该算法已公开。由于该算法基于ECC，故其签名速度与秘钥生成速度都快于RSA。ECC256位（SM2采用的就是ECC256位的一种）安全强度比RSA 2048位高，但运算速度快于RSA。即SM2&gt;RSA2048，安全度高且运算速度块。</li><li>SM3：消息摘要，可以用MD5作为对比理解。该算法已公开。校验结果为256位。</li><li>SM4：对称加密，密钥长度和分组长度均为128位。无线局域网标准的分组数据算法。</li></ul></li></ol><h2 id="六-签发证书原理"><a href="#六-签发证书原理" class="headerlink" title="六.签发证书原理"></a>六.签发证书原理</h2><ul><li>证书颁发机构（CA）</li></ul><p>证书颁发机构（CA，Certificate Authority）是负责签发和管理数字证书的组织。它们通过验证申请者的身份，使用自己的私钥对申请者的公钥和信息进行签名，从而生成可信的SSL&#x2F;TLS证书。以下是一些知名的证书颁发机构及其特点：</p><h5 id="知名的证书颁发机构"><a href="#知名的证书颁发机构" class="headerlink" title="知名的证书颁发机构"></a>知名的证书颁发机构</h5><ul><li>DigiCert：全球领先的证书颁发机构，提供多种类型的SSL&#x2F;TLS证书，包括DV、OV、EV证书。</li><li>Comodo (Sectigo)：提供多种安全解决方案，证书种类齐全，价格相对较低。</li><li>GlobalSign：专注于高安全性和高可靠性的证书，适用于大型企业和组织。</li><li>Symantec (现为DigiCert的一部分)：曾经是最大的证书颁发机构之一，主要提供高端证书解决方案。</li><li>GoDaddy：知名的域名注册商，也提供SSL&#x2F;TLS证书服务，价格实惠。</li><li>Let’s Encrypt：提供免费的DV证书，致力于推动全网HTTPS化，自动化管理证书的申请和续期。</li><li>Entrust：提供多种安全解决方案，包括SSL&#x2F;TLS证书、代码签名证书等，适用于各类企业和组织。</li></ul><h5 id="中国区的证书销售-签发机构"><a href="#中国区的证书销售-签发机构" class="headerlink" title="中国区的证书销售&#x2F;签发机构"></a>中国区的证书销售&#x2F;签发机构</h5><p>证书颁发机构在全球范围内提供服务，但在不同地区可能通过合作伙伴或分销商销售证书。例如，在中国，知名的CA合作伙伴包括：</p><ul><li>沃通CA：提供多种SSL&#x2F;TLS证书，并与国际CA如DigiCert、GlobalSign等合作。</li><li>CFCA (中国金融认证中心)：专注于金融行业的安全解决方案，提供符合中国国密标准的SSL&#x2F;TLS证书。</li></ul><h5 id="签发免费证书-https-letsencrypt-org"><a href="#签发免费证书-https-letsencrypt-org" class="headerlink" title="签发免费证书 https://letsencrypt.org"></a>签发免费证书 <a href="https://letsencrypt.org/">https://letsencrypt.org</a></h5><p>免费证书的签发近年来变得越来越普及，最知名的提供者是Let’s Encrypt。以下是签发免费证书的步骤：</p><ol><li><strong>选择证书提供者</strong>：访问Let’s Encrypt官网。</li><li><strong>安装证书管理工具</strong>：如Certbot，用于自动化证书管理。</li><li><strong>申请证书</strong>：运行Certbot命令，自动生成并安装SSL&#x2F;TLS证书。</li><li><strong>自动续期</strong>：配置Certbot定期检查和续期证书，确保证书的持续有效性。</li></ol><h5 id="国密证书免费签发"><a href="#国密证书免费签发" class="headerlink" title="国密证书免费签发"></a>国密证书免费签发</h5><ol><li><strong>国家原生支持网站</strong>: <a href="https://www.gmcrt.cn/gmcrt/index.jsp">https://www.gmcrt.cn/gmcrt/index.jsp</a></li><li><strong>外部签发网站</strong>: <a href="https://www.gmcert.org/">https://www.gmcert.org</a></li></ol><hr><hr><h2 id="七-Nginx部署多场景下使用"><a href="#七-Nginx部署多场景下使用" class="headerlink" title="七.Nginx部署多场景下使用"></a>七.Nginx部署多场景下使用</h2><h3 id="7-1-https场景-RSA算法"><a href="#7-1-https场景-RSA算法" class="headerlink" title="7.1 https场景  RSA算法"></a>7.1 https场景  RSA算法</h3><ul><li><strong>在nginx中部署SSL&#x2F;TLS证书来支持HTTPS非常简单</strong>：</li></ul><ol><li><strong>安装nginx</strong>：确保服务器上已安装nginx。</li><li><strong>配置证书</strong>：将证书文件和私钥放置在服务器指定目录。</li><li><strong>修改nginx配置文件</strong>：在nginx配置文件中添加如下配置：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs nginx">   <span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">server_name</span> xxxx.com www.xxxx.com;<br><br>    <span class="hljs-comment"># SSL 配置</span><br>    <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/live/xxxx.com/fullchain.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/xxxx.com/privkey.pem;<br>    <span class="hljs-attribute">ssl_trusted_certificate</span> /etc/letsencrypt/live/xxxx.com/chain.pem;<br><br>    <span class="hljs-comment"># 安全 SSL 设置</span><br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> <span class="hljs-string">&#x27;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&#x27;</span>;<br><br>    <span class="hljs-comment"># 其他设置</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        <span class="hljs-attribute">proxy_pass</span> http://localhost:8888;<br>    &#125;<br><br><br>    <span class="hljs-comment"># HTTP Strict Transport Security (HSTS)</span><br>    <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=31536000; includeSubDomains&quot;</span> always;<br><br>    <span class="hljs-comment"># OCSP Stapling</span><br>    <span class="hljs-attribute">ssl_stapling</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_stapling_verify</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">resolver</span> <span class="hljs-number">8.8.8.8</span> <span class="hljs-number">8.8.4.4</span> valid=<span class="hljs-number">300s</span>;<br>    <span class="hljs-attribute">resolver_timeout</span> <span class="hljs-number">5s</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="7-2-grpc场景-RSA算法"><a href="#7-2-grpc场景-RSA算法" class="headerlink" title="7.2 grpc场景 RSA算法"></a>7.2 grpc场景 RSA算法</h3><ul><li>在nginx中配置gRPC支持SSL&#x2F;TLS：</li></ul><ol><li><strong>确保nginx版本支持gRPC</strong>。</li><li><strong>配置gRPC代理</strong>：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> grpc_service &#123;<br>    <span class="hljs-comment"># 使用域名指向 gRPC 服务器</span><br>    <span class="hljs-attribute">server</span> <span class="hljs-number">10.0.12.7:50004</span>;  <span class="hljs-comment"># 替换为您的 gRPC 服务器域名和端口</span><br>&#125;<br><br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> http2;<br>    <span class="hljs-attribute">server_name</span> www.xxxx.com;<br>    <br>    <span class="hljs-comment"># SSL 配置</span><br>    <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/archive/xxxx.com/fullchain.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/archive/xxxx.com/privkey.pem;<br>    <span class="hljs-attribute">ssl_trusted_certificate</span> /etc/letsencrypt/archive/xxxx.com/chain.pem;<br><br>    <span class="hljs-comment"># 安全 SSL 设置</span><br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> <span class="hljs-string">&#x27;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&#x27;</span>;<br><br>    <span class="hljs-comment"># gRPC 配置</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">grpc_pass</span> grpc://grpc_service;<br>        <span class="hljs-comment"># 通过以下指令来处理 gRPC 请求头</span><br>        <span class="hljs-attribute">grpc_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">grpc_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">grpc_set_header</span> Host <span class="hljs-variable">$host</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="7-3-wss-websocket-ssl-场景-RSA算法"><a href="#7-3-wss-websocket-ssl-场景-RSA算法" class="headerlink" title="7.3 wss(websocket ssl)场景 RSA算法"></a>7.3 wss(websocket ssl)场景 RSA算法</h3><ul><li>在nginx中配置WebSocket支持SSL&#x2F;TLS：</li></ul><ol><li><strong>配置WebSocket代理</strong>：<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs nginx">   <span class="hljs-section">http</span> &#123;<br>        <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">types_hash_max_size</span> <span class="hljs-number">2048</span>;<br>        <span class="hljs-comment"># 这里很重要 </span><br>        <span class="hljs-attribute">map</span> <span class="hljs-variable">$http_upgrade</span> <span class="hljs-variable">$connection_upgrade</span> &#123;<br>            &#x27;websocket&#x27;      upgrade;     <span class="hljs-comment">#如果为websocket 则为 upgrade 可升级的。</span><br>        &#125;<br>        <span class="hljs-attribute">include</span> /etc/nginx/mime.types;<br>        <span class="hljs-attribute">default_type</span> application/octet-stream;<br><br>        <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>; <span class="hljs-comment"># Dropping SSLv3, ref: POODLE</span><br>        <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><br>        <span class="hljs-comment"># Logging Settings</span><br>        <span class="hljs-attribute">log_format</span> global_log <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] <span class="hljs-variable">$request</span> <span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> <span class="hljs-variable">$http_referer</span> <span class="hljs-variable">$http_user_agent</span> redirect: <span class="hljs-variable">$upstream_http_x_real_ip</span>&#x27;</span>;<br>        <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log global_log;<br>        <span class="hljs-attribute">error_log</span> /var/log/nginx/<span class="hljs-literal">error</span>.log;<br>        <br>        <span class="hljs-section">upstream</span> wss_backend &#123;<br>            <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.1.88:8888</span>;<br>        &#125;<br>        <br>        <span class="hljs-section">server</span> &#123;<br>            <span class="hljs-attribute">listen</span>       <span class="hljs-number">443</span> ssl;<br>            <span class="hljs-attribute">server_name</span>  ws-server.xxxx.com;<br>            <span class="hljs-comment"># SSL 配置</span><br>            <span class="hljs-attribute">ssl_certificate</span> /etc/letsencrypt/archive/xxxx.com/fullchain.pem;<br>            <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/archive/xxxx.com/privkey.pem;<br>            <span class="hljs-attribute">ssl_trusted_certificate</span> /etc/letsencrypt/archive/xxxx.com/chain.pem;<br>        <br>            <span class="hljs-section">location</span> / &#123;<br>                <span class="hljs-attribute">proxy_pass</span>              http://wss_backend;<br>                <span class="hljs-attribute">proxy_ssl_server_name</span>   <span class="hljs-literal">on</span>;<br>                <span class="hljs-attribute">proxy_http_version</span>      <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>                <span class="hljs-attribute">proxy_set_header</span>        Upgrade         <span class="hljs-variable">$http_upgrade</span>;<br>                <span class="hljs-attribute">proxy_set_header</span>        Connection      <span class="hljs-variable">$connection_upgrade</span>;<br>            &#125;<br>        <br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="7-2-国密算法-SM2"><a href="#7-2-国密算法-SM2" class="headerlink" title="7.2 国密算法 SM2"></a>7.2 国密算法 SM2</h3><ol><li>需要专门nginx或者nginx编译支持国密，否则无法使用。<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span><br>    &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">server_name</span> awssl.xxxx.cn;<br>        <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>        <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:AES128-SHA:DES-CBC3-SHA:ECC-SM4-CBC-SM3:ECC-SM4-GCM-SM3;<br>        <span class="hljs-attribute">ssl_verify_client</span> <span class="hljs-literal">off</span>;<br><br>        <span class="hljs-attribute">ssl_certificate</span> ssl/yjgood.cert.pem;<br>        <span class="hljs-attribute">ssl_certificate_key</span> ssl/yjgood.key.pem;<br><br><br>        <span class="hljs-section">location</span> /<br>        &#123;<br>            <span class="hljs-attribute">root</span> html;<br>            <span class="hljs-attribute">index</span> index.html index.htm;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li>缺点1:  openssl 原生不支持国密算法-基于ECC(椭圆加密算法)，已经验证</li><li>缺点2:  原生支持浏览器极少，目前看只有360浏览器，奇安信可信浏览器以及一个专门的浏览器（仅支持windows）,已经验证</li><li>缺点3:  没有公共认证的签发机构（全局认可），内置浏览器无法识别，属于私有自签发类型,已经验证</li></ul><h2 id="八-总结"><a href="#八-总结" class="headerlink" title="八.总结"></a>八.总结</h2><h3 id="8-1-发展"><a href="#8-1-发展" class="headerlink" title="8.1 发展"></a>8.1 发展</h3><p>目前http + SSL&#x2F;TLS 已经成为事实上的标准，而基于http的grpc，websocket 都在使用加密证书，数据传输安全已经是非常安全！</p><h3 id="8-2-破解"><a href="#8-2-破解" class="headerlink" title="8.2 破解"></a>8.2 破解</h3><h5 id="8-2-1-对称加密算法"><a href="#8-2-1-对称加密算法" class="headerlink" title="8.2.1 对称加密算法"></a>8.2.1 对称加密算法</h5><p>1.AES (Advanced Encryption Standard)：</p><ul><li>128位密钥：在目前的计算能力下，暴力破解AES-128需要大约2^{128}次尝试。即使使用最强大的超级计算机，这个时间也会超过宇宙的寿命。</li><li>256位密钥：暴力破解AES-256需要大约2^{256}次尝试，这几乎是不可能完成的任务，时间远远超过了宇宙的寿命。</li></ul><h5 id="8-2-2-非对称加密算法"><a href="#8-2-2-非对称加密算法" class="headerlink" title="8.2.2 非对称加密算法"></a>8.2.2 非对称加密算法</h5><p>1.RSA (Rivest-Shamir-Adleman)：</p><ul><li>1024位密钥：现代计算能力下，使用分布式网络和先进算法，可能在数月到几年内破解。然而，这种密钥长度已经被认为是不安全的。</li><li>2048位密钥：目前被广泛使用，被认为在可预见的未来内是安全的。使用现有的技术和资源，破解可能需要数十亿年。</li><li>4096位密钥：更加安全，破解所需时间比2048位密钥更长，几乎无法破解。</li></ul><p>2.ECC (Elliptic Curve Cryptography)：</p><ul><li>256位密钥：与RSA相比，ECC的256位密钥提供了与3072位RSA密钥相当的安全性。暴力破解几乎不可能。</li><li>384位密钥：提供更高的安全性，破解所需时间远超人类可接受的范围。</li></ul><h5 id="8-2-3-哈希算法"><a href="#8-2-3-哈希算法" class="headerlink" title="8.2.3 哈希算法"></a>8.2.3 哈希算法</h5><p>1.SHA-256 (Secure Hash Algorithm 256-bit)：</p><ul><li>目前尚未有有效的碰撞攻击，破解需要进行2^{128}次尝试，时间极为漫长，几乎不可能实现。</li></ul>]]></content>
    
    
    <categories>
      
      <category>SSL/TLS证书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSL/TLS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冥想调息释放负能量</title>
    <link href="/2024/07/26/%E5%86%A5%E6%83%B3%E8%B0%83%E6%81%AF%E9%87%8A%E6%94%BE%E8%B4%9F%E8%83%BD%E9%87%8F/"/>
    <url>/2024/07/26/%E5%86%A5%E6%83%B3%E8%B0%83%E6%81%AF%E9%87%8A%E6%94%BE%E8%B4%9F%E8%83%BD%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是冥想？-为什么要冥想？"><a href="#什么是冥想？-为什么要冥想？" class="headerlink" title="什么是冥想？ 为什么要冥想？"></a>什么是冥想？ 为什么要冥想？</h1><p> 冥想是一种让大脑休息的，得到缓解的，没有干扰的，释放压力的行为方式，可以提供专注力，感受自身存在的客观观察！</p><p> 超脱 或许就在这其中！ </p><h1 id="冥想进入方法"><a href="#冥想进入方法" class="headerlink" title="冥想进入方法"></a>冥想进入方法</h1><ul><li>静坐，无他念 双眼微闭，注意力聚中眉心下，感受自身的存在！ 持续到无它念。</li></ul><h1 id="意念出体"><a href="#意念出体" class="headerlink" title="意念出体"></a>意念出体</h1><ul><li>冥想观察己身，入定后，意念可以环绕自己，观察自己！</li></ul><h1 id="觉醒超能力"><a href="#觉醒超能力" class="headerlink" title="觉醒超能力"></a>觉醒超能力</h1><ul><li>或许有吧 还没有经历过！</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>仅仅是一种调整休息的方法而已！</p>]]></content>
    
    
    <categories>
      
      <category>冥想和休息</category>
      
    </categories>
    
    
    <tags>
      
      <tag>冥想法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暂缓过去珍惜现在迎接未来</title>
    <link href="/2024/07/26/%E6%9A%82%E7%BC%93%E8%BF%87%E5%8E%BB%E8%BF%8E%E6%8E%A5%E7%8E%B0%E5%9C%A8/"/>
    <url>/2024/07/26/%E6%9A%82%E7%BC%93%E8%BF%87%E5%8E%BB%E8%BF%8E%E6%8E%A5%E7%8E%B0%E5%9C%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/img/bg/xk-3.jpg"></p><h2 id="这10年我都做了什么？"><a href="#这10年我都做了什么？" class="headerlink" title="这10年我都做了什么？"></a>这10年我都做了什么？</h2><p>1994年出生，2014年我22岁，踏入互联网行业，那时正是互联网风口，毫无悬念我被吹起来了！</p><p>学习这个专业，一开始是因为我要成为那非常酷的黑客，但进入行业后发现”黑客”这个定位离我非常的遥远，因为我已经隐约知道想成为一名黑客需要具备的技术能力，认知能力的要求是非常非常深高的，我不仅仅要了解计算机原理，编程语言，数据结构，网络架构，操作系统，还有各种各样的工具使用，以及层出不穷的攻击手段（xss，sqlmap，cc，dos，ddos，csrf，暴力破解，病毒，木马，中间人攻击，dns劫持，网络洪水攻击，中间人(MITM)类型的网络攻击，社会工程学攻击，恶意软件，会话劫持，网络钓鱼，内存溢出，勒索软件等），给人一种大山就在眼前，你很难很难逾越，这种感觉让我不得不放弃那好高骛远的想法，从基础做起，从基础学起！ </p><p>这就是我刚入行第一年给我的冲击！</p><p>第二年我在国内安全设备公司做安全交付，学会了网络漏洞扫描，安全报告编写，商务会谈，直接对客户出方案卖安全产品。最后交付到客户环境中去；因为客户类型较多，让我懂得了什么叫 “客户虐你千百遍，我待客户如初恋！”，也许只有经历过的人才会懂～</p><p>第三年我终于熟练掌握了linux和其生态，也结识了很多圈内的大佬，其中有一位名叫ln(网名)的小哥（目前已经见面，是一位稳重，且可靠值得深交的朋友），他给予了我巨大（重生）的帮助，直接或间接的推进我的成长，真正的掌握核心技术，身价暴涨2倍多，这就是我24岁那个时候的状态；也遇到了那个说“就给你一次机会，没事”的项目经理（唐老板），那时候我差点哭出来，终于～</p><p>2019年锋芒毕露的我，觉得自己非常棒，写了很多文档，买了好多网课，不断学习和成长； 同时我也谈恋爱了 我很喜欢她（到骨子那种）一切都是顺利的，<br>2019年中我换工作分别去了某电信sim卡巨头，华为外包（松山湖溪村，难忘的一次工作，见闻逼格得到提升）； 还去了阿里旗下子公司浩鲸云（做金融板块，当时同事有北大的有清华，而我…）   </p><p>2019年终，去了某基金公司做第一次独立运维开发工作（其实就是ci cd流水线搭建，各种语言的流水线 c  c# java python go vue），我领导是个姐姐，挺会办事的，只可惜我是外包员工，在某个时候或许是有那么一些自卑的，待了了8个月就离开了，<br>2020年去了目前做扫地机器人top5的公司，差不多两年，度过了可怕的疫情期（疫情本身不可怕），也顺利在疫情期间结婚了！ 此时已经2022年终，我也已经28岁！</p><p>28岁，已婚，对未来有着无限幻想，大胆的不顾同事们的劝阻离职，去寻找新的出路，没想到到处都是陷阱，其实出路哪里有那么好找呢？ 对吧 哈哈！</p><p>29岁 某智能水表公司，某游戏公司，某扫地机器人公司（老板人特别好，只可惜没拿到融资），某日本交易所团队度过了我的29岁！</p><p>2023年12月 与吾儿见面，举家迁移到贵州老家农村休息了7个月，老婆也辞去工作，专心为家庭付出所有心血！</p><p>这几个月，我创建了游戏工作室，学习进入电商赛道，这都算是开辟了新的道路哈，而这仅仅只是开始，因为我一直都相信，只要思想不停歇，那么路就一定会越来越多</p><p>2024年 互联风口算是过去了，各种裁员的信息～ 夹杂着铺天盖地的AI与语言模型来临，以及前两年的爆火web2.0短视频风口！ </p><p>新的风口早已出现，只是因为认知问题，还不知道怎么去迎接她，那么我就持小小沧桑之剑，继往静候新的风口把我吹起来！</p><p>这就是我这10年做的经历～</p><h2 id="新的路程，新的思考"><a href="#新的路程，新的思考" class="headerlink" title="新的路程，新的思考"></a>新的路程，新的思考</h2><p>30岁 送给自己最好的礼物就是人格的完善，认知的契合！以及我妻子，我儿子的加入，我们这个家成了！</p><p><img src="/img/home/WechatIMG16.jpg"><br><img src="/img/home/WechatIMG17.jpg"><br><img src="/img/home/WechatIMG18.jpg"><br><img src="/img/home/WechatIMG19.jpg"><br><img src="/img/home/WechatIMG20.jpg"></p><h2 id="我当前在做的"><a href="#我当前在做的" class="headerlink" title="我当前在做的"></a>我当前在做的</h2><p>我学习了AI大语言模型，我学习了视频创作，我坚持做好以往的积累，持续深入下去<br>新的项目也在追赶风口，希望一切顺利，我也祝福和尽己力守护我们能走向成功！<br>时间： 2024-07-26 01:45</p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>举头三尺有神明，神游天地为星辰。  我就是：  雪落星辰</p><p>感谢自己，走过千山万水，依旧保持向上的心～<br>谢谢你 我的前半生～ 再见，你以后就是回忆了。</p>]]></content>
    
    
    <categories>
      
      <category>我的上半生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>历年总结</tag>
      
      <tag>新的历程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-游戏工作室运营框架</title>
    <link href="/2024/07/25/01-%E6%B8%B8%E6%88%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E8%BF%90%E8%90%A5%E6%A1%86%E6%9E%B6/"/>
    <url>/2024/07/25/01-%E6%B8%B8%E6%88%8F%E5%B7%A5%E4%BD%9C%E5%AE%A4%E8%BF%90%E8%90%A5%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h1 id="下一代运营法"><a href="#下一代运营法" class="headerlink" title="下一代运营法"></a>下一代运营法</h1><ul><li>出其不意 反其道而行之 在法律的允许下！</li><li>微小细节，成就大事，看不见的地方，大多数人忽略或不在乎的地方就是门口</li></ul>]]></content>
    
    
    <categories>
      
      <category>运营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>运营</tag>
      
      <tag>新赛道</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-AfterEffects基础知识</title>
    <link href="/2024/07/25/02-AfterEffects%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/07/25/02-AfterEffects%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>视频后期</category>
      
      <category>AE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>AE</tag>
      
      <tag>视频后期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-AfterEffects认识和配置</title>
    <link href="/2024/07/25/01-AfterEffects%E8%AE%A4%E8%AF%86%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/07/25/01-AfterEffects%E8%AE%A4%E8%AF%86%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>视频后期</category>
      
      <category>AE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>AE</tag>
      
      <tag>视频后期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>08-AI基于大语言模型的应用开发</title>
    <link href="/2024/07/25/08-AI%E5%9F%BA%E4%BA%8E%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    <url>/2024/07/25/08-AI%E5%9F%BA%E4%BA%8E%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>大语言模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>人工智能</tag>
      
      <tag>大语言模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07-AI开源大语言模型微调与开发</title>
    <link href="/2024/07/25/07-AI%E5%BC%80%E6%BA%90%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83%E4%B8%8E%E5%BC%80%E5%8F%91/"/>
    <url>/2024/07/25/07-AI%E5%BC%80%E6%BA%90%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83%E4%B8%8E%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>大语言模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>人工智能</tag>
      
      <tag>大语言模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06-AI开源大语言模型使用</title>
    <link href="/2024/07/25/06-AI%E5%BC%80%E6%BA%90%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/07/25/06-AI%E5%BC%80%E6%BA%90%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>大语言模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>人工智能</tag>
      
      <tag>大语言模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-AI大语言模型融合Linux系统</title>
    <link href="/2024/07/25/05-AI%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%9E%8D%E5%90%88Linux%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/07/25/05-AI%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%9E%8D%E5%90%88Linux%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>大语言模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>人工智能</tag>
      
      <tag>大语言模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-AI大语言模型api使用</title>
    <link href="/2024/07/25/04-AI%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8Bapi%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/07/25/04-AI%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8Bapi%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>大语言模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>人工智能</tag>
      
      <tag>大语言模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-AI大语言模型实践</title>
    <link href="/2024/07/25/03-AI%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%AE%9E%E8%B7%B5/"/>
    <url>/2024/07/25/03-AI%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>大语言模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>人工智能</tag>
      
      <tag>大语言模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-AI分类与当前矩阵</title>
    <link href="/2024/07/25/02-AI%E5%88%86%E7%B1%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E7%9F%A9%E9%98%B5/"/>
    <url>/2024/07/25/02-AI%E5%88%86%E7%B1%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>大语言模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>人工智能</tag>
      
      <tag>大语言模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-AI人工智能基础认知</title>
    <link href="/2024/07/25/01-AI%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5/"/>
    <url>/2024/07/25/01-AI%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/img/bg/xk-4.jpg"></p><h1 id="一-AI人工智能是什么？"><a href="#一-AI人工智能是什么？" class="headerlink" title="一. AI人工智能是什么？"></a>一. AI人工智能是什么？</h1><p>人工智能（AI, Artificial Intelligence）是一门计算机科学的分支，致力于创造能够模拟或增强人类智能的系统。AI通过机器学习、自然语言处理、计算机视觉等技术，使机器能够执行诸如感知、推理、学习和决策等任务。例如，当你在智能手机上使用语音助手询问天气时，这个过程背后的技术就是AI，它能够理解你的语言，检索相关信息，并以自然的语言回答你。这一切让AI成为现代生活中不可或缺的一部分，从智能家居到自动驾驶，AI无处不在。</p><p>AI技术的发展可以追溯到20世纪50年代，当时计算机科学家开始探索机器是否可以像人类一样思考。早期的AI研究主要集中在符号推理和逻辑编程上。随着计算能力的提升和数据的爆炸性增长，20世纪80年代至90年代，机器学习算法逐渐兴起，特别是神经网络的研究取得了重大突破。</p><p>进入21世纪，深度学习的出现和发展成为AI技术的一大里程碑。深度学习利用多层神经网络结构，能够处理和分析复杂的数据，从而实现图像识别、语音识别、自然语言处理等领域的显著进步。尤其在2010年后，GPU的计算能力大幅提升，加速了深度学习的研究和应用，推动了AI在各个领域的广泛应用。</p><h1 id="二-波澜壮阔的AI时代"><a href="#二-波澜壮阔的AI时代" class="headerlink" title="二. 波澜壮阔的AI时代"></a>二. 波澜壮阔的AI时代</h1><p>2024年，AI技术的应用已经渗透到各个行业，以下是一些流行的AI技术和应用：</p><p>1.生成式AI：如GPT-4，能够生成高质量的文本内容，应用于写作、创意生成等领域。<br>2.计算机视觉：在自动驾驶、医疗影像分析、智能安防等领域广泛应用，通过深度学习算法进行图像和视频的识别和分析。<br>3.语音识别和合成：智能语音助手、翻译系统等，通过自然语言处理技术实现更自然的人机交互。<br>4.强化学习：在游戏AI、机器人控制等领域，通过不断试错和优化，提升系统的决策能力。<br>5.边缘AI：将AI计算能力从云端向边缘设备（如智能摄像头、物联网设备）扩展，实现实时、低延迟的智能应用。</p><h1 id="三-他的技术发展是？"><a href="#三-他的技术发展是？" class="headerlink" title="三. 他的技术发展是？"></a>三. 他的技术发展是？</h1><p>AI技术的核心原理主要包括以下几个方面：</p><ul><li>1.机器学习：通过数据训练模型，使机器能够从数据中学习并做出预测或决策。机器学习算法包括监督学习、无监督学习和强化学习。</li><li>2.神经网络：模仿人脑结构，由大量的节点（神经元）和连接组成，用于处理和分析复杂的数据。深度学习是神经网络的一个分支，使用多层网络结构来提高学习和识别能力。</li><li>3.自然语言处理（NLP）：使机器能够理解、生成和与人类语言互动，涉及文本分析、语义理解、机器翻译等技术。</li><li>4.计算机视觉：通过图像处理和分析算法，使机器能够“看见”并理解图像和视频中的内容，用于面部识别、物体检测、图像分类等应用。</li><li>5.强化学习：通过与环境交互，不断试错和学习策略，以最大化累积奖励，广泛应用于游戏AI、机器人控制等领域。</li></ul><p>例如，在一个自动驾驶系统中，AI的实现涉及从车辆传感器收集大量数据，通过神经网络模型进行训练，识别道路、车辆、行人等信息，做出驾驶决策，并不断优化模型以提高安全性和可靠性。这一过程展示了AI技术在实际生活中的应用和实现方法。</p><h1 id="四-人工智能学派"><a href="#四-人工智能学派" class="headerlink" title="四. 人工智能学派"></a>四. 人工智能学派</h1><p>在理解AI的技术框架和实现原理时，不同的人工智能学派提供了不同的视角和方法，这些学派对AI的发展有着重要影响。以下是主要的人工智能学派及其代表方法：</p><p><strong>1.联结主义</strong></p><ul><li>主要思想：利用数学模型来研究人类认知的方法，用神经元的连接机制实现人工智能。</li><li>代表方法：神经网络、SVM（支持向量机）等。</li><li>应用场景：图像识别、语音识别等需要模拟人脑神经元活动的领域。</li></ul><p><strong>2.符号主义</strong></p><ul><li>主要思想：认知就是通过对有意义的表示符号进行推导计算，并将学习视为逆向演绎，主张用显式的公理和逻辑体系搭建人工智能系统。</li><li>代表方法：专家系统、知识图谱、决策树等。</li><li>应用场景：医疗诊断、财务决策等需要逻辑推理的领域。</li></ul><p><strong>3.演化主义</strong></p><ul><li>主要思想：对生物进化进行模拟，使用遗传算法和遗传编程。</li><li>代表方法：遗传算法等。</li><li>应用场景：优化问题、自动设计等需要模拟自然选择和进化的领域。</li></ul><p><strong>4.贝叶斯主义</strong></p><ul><li>主要思想：使用概率规则及其依赖关系进行推理。</li><li>代表方法：朴素贝叶斯等。</li><li>应用场景：文本分类、风险评估等需要处理不确定性和概率信息的领域。</li></ul><p><strong>5.行为主义</strong></p><ul><li>主要思想：以控制论及感知-动作型控制系统原理模拟执行行为以复现人类智能。</li><li>代表方法：强化学习等。</li><li>应用场景：游戏AI、机器人控制等需要通过不断试错和反馈学习的领域。</li></ul><h1 id="五-实现原理和技术框架"><a href="#五-实现原理和技术框架" class="headerlink" title="五. 实现原理和技术框架"></a>五. 实现原理和技术框架</h1><h3 id="5-1-实现原理"><a href="#5-1-实现原理" class="headerlink" title="5.1 实现原理"></a>5.1 实现原理</h3><p>人工智能系统的实现涉及多个步骤和技术环节，从数据收集到模型部署，每一步都至关重要。</p><p><strong>以下是实现AI系统的一般流程：</strong></p><p><strong>1.数据收集和准备</strong></p><ul><li>数据收集：从传感器、日志、公开数据集等渠道收集大量相关数据。例如，在自动驾驶中，摄像头和激光雷达收集道路信息。</li><li>数据清洗：去除噪声和处理缺失值，确保数据质量。</li><li>数据标注：手动或自动标注数据，以便模型能够进行监督学习。</li></ul><p><strong>2.模型选择和训练</strong></p><ul><li>模型选择：根据任务需求选择合适的机器学习或深度学习模型，如决策树、支持向量机、卷积神经网络（CNN）等。</li><li>训练数据分割：将数据分为训练集、验证集和测试集。</li><li>模型训练：使用训练集数据，通过不断调整模型参数以最小化损失函数，提高预测准确性。</li><li>模型调优：通过验证集数据调整超参数，进一步优化模型性能。</li></ul><p><strong>3.模型评估和优化</strong></p><ul><li>模型评估：使用测试集数据评估模型性能，常用指标包括准确率、召回率、F1值等。</li><li>模型优化：通过模型改进、增加数据量、使用正则化技术等方法提高模型性能。</li></ul><p><strong>4.部署和应用</strong></p><ul><li>模型部署：将训练好的模型部署到云端、边缘设备或本地服务器中，以支持实际应用。</li><li>性能监控：实时监控模型性能，及时发现和解决问题。</li></ul><p><strong>5.监控和维护</strong></p><ul><li>持续监控：通过监控系统性能和用户反馈，定期更新和重新训练模型，以应对数据和需求变化。</li></ul><h3 id="5-2-技术框架"><a href="#5-2-技术框架" class="headerlink" title="5.2 技术框架"></a>5.2 技术框架</h3><p><strong>构建AI系统通常需要以下技术框架：</strong></p><p><strong>1.数据处理框架</strong></p><ul><li>Pandas：用于数据清洗和处理。</li><li>NumPy：用于数值计算和数据操作。</li></ul><p><strong>2.模型训练框架</strong></p><ul><li>TensorFlow：谷歌开发的深度学习框架，适用于大规模分布式训练。</li><li>PyTorch：Facebook开发的深度学习框架，易于使用，适合研究和应用。</li></ul><p><strong>3.模型部署框架</strong></p><ul><li>TensorFlow Serving：用于部署TensorFlow模型，支持高性能实时推理。</li><li>ONNX：用于将不同框架的模型转换为统一格式，以便在不同平台上部署。</li></ul><p><strong>4.监控和维护工具</strong></p><ul><li>Prometheus：开源的监控系统和时序数据库。</li><li>Grafana：开源的分析和监控平台，用于可视化数据和系统性能。</li></ul><h1 id="六-对编程语言的要求"><a href="#六-对编程语言的要求" class="headerlink" title="六. 对编程语言的要求"></a>六. 对编程语言的要求</h1><p>构建和实现AI系统对编程语言有一定的要求，不同的编程语言在不同的环节中发挥着各自的优势。</p><p><strong>以下是几种常用的编程语言及其在AI系统中的应用：</strong></p><p><strong>1.Python</strong></p><ul><li>广泛使用：Python是AI和机器学习领域中最常用的语言，拥有丰富的库和框架，如TensorFlow、PyTorch、Scikit-Learn等。</li><li>简洁易用：Python语法简洁，易于学习和使用，适合快速开发和原型设计。</li><li>数据处理：Pandas和NumPy等库使数据处理和数值计算变得高效便捷。</li></ul><p><strong>2.R语言</strong></p><ul><li>数据分析：R语言在数据分析和统计计算领域具有强大的功能，适合处理和分析复杂数据集。</li><li>可视化：R语言提供了丰富的数据可视化工具，如ggplot2，适合呈现数据分析结果。</li></ul><p><strong>3.Java语言</strong></p><ul><li>企业级应用：Java在大规模企业级应用中广泛使用，具有良好的性能和稳定性。</li><li>大数据处理：与Hadoop和Spark等大数据处理框架兼容性好，适合处理大规模数据集。</li></ul><p><strong>4.C++语言</strong></p><ul><li>高性能计算：C++语言的高性能和低级别内存控制，使其在需要高计算性能的AI应用中广泛使用，如计算机视觉和实时系统。</li></ul><h1 id="七-为什么大模型这么火"><a href="#七-为什么大模型这么火" class="headerlink" title="七. 为什么大模型这么火"></a>七. 为什么大模型这么火</h1><h5 id="为什么是“⼤”，三个核心点"><a href="#为什么是“⼤”，三个核心点" class="headerlink" title="为什么是“⼤”，三个核心点"></a><strong>为什么是“⼤”，三个核心点</strong></h5><ul><li>1.⼤算⼒</li><li>2.⼤数据</li><li>3.⼤参数</li></ul><h3 id="7-1-世界级知识库"><a href="#7-1-世界级知识库" class="headerlink" title="7.1 世界级知识库"></a>7.1 世界级知识库</h3><ul><li>集成海量数据和知识</li><li>各⾏各业各领域</li><li>知识库不断升级和更新</li><li>跨领域导致⼤模型通域知识融汇贯通、意图深度理解</li><li>强⼤信息整合和分析能⼒，为企业战略提供有效决策</li><li>数据深度分析和挖掘，揭示隐藏模式和规律，为企业战略提供科学依据</li></ul><h3 id="7-2-领域泛化能⼒"><a href="#7-2-领域泛化能⼒" class="headerlink" title="7.2 领域泛化能⼒"></a>7.2 领域泛化能⼒</h3><ul><li>泛化能⼒强的模型不仅能够在某⼀特定领域内表现出⾊，⽽且能够应对新的领域和问题。</li><li>⾃然语⾔处理领域，BERT模型不仅能够在问答系统表现出⾊，⽽且能够应⽤于⽂本分类、命名实体识别等多个任务</li><li>ResNet模型不仅能够应⽤在图像分类，还可以应⽤在⽬标检测、图像分割等其他任务中</li></ul><h3 id="7-3-逻辑推理能⼒"><a href="#7-3-逻辑推理能⼒" class="headerlink" title="7.3 逻辑推理能⼒"></a>7.3 逻辑推理能⼒</h3><ul><li>逻辑推理能⼒是⼤模型的关键要素，逻辑推理能⼒使机器能够理解、分析和解决问题，从⽽提⾼⼯作效率和准确性</li></ul><h1 id="八-大模型的智能从何而来"><a href="#八-大模型的智能从何而来" class="headerlink" title="八. 大模型的智能从何而来"></a>八. 大模型的智能从何而来</h1><ul><li>虽然两片树叶都有不同纹理，不同场景和事情无法做出一些对比，但还是能作为参考</li></ul><h2 id="8-1-路线"><a href="#8-1-路线" class="headerlink" title="8.1 路线"></a>8.1 路线</h2><p>我们可以把大模型的智能获取过程看作是人类成长过程</p><ul><li>小孩出生时：通过观察环境，听声音增加认知（被动获取）</li><li>长大3岁时： 观察环境，听声音，看电视，父母主动教受知识等增加认知（被动获取&#x2F;主动获取）</li><li>长大5岁后： 基本养成个人学习和自主控制，学会主动去做，去学习，父母也会包各种培训，补习班，甚至强化班（被动获取&#x2F;主动获取）</li><li>量变到质变： 大语言模型和人类成长类似，当获取一定量的数据后，会通过内置的算法对所掌握的知识进行整理归纳（成型）</li></ul><h2 id="8-2-必要条件"><a href="#8-2-必要条件" class="headerlink" title="8.2 必要条件"></a>8.2 必要条件</h2><ul><li>优秀的模型&#x2F;算法</li><li>巨大的数据集</li><li>超强的算力</li></ul><h1 id="九-大模型落地挑战"><a href="#九-大模型落地挑战" class="headerlink" title="九. 大模型落地挑战"></a>九. 大模型落地挑战</h1><ul><li>不是什么人，什么公司都可以去搞大模型，因为成本非常的高昂</li><li>定制化⼤模型，成本在百万级以上，仍旧⾼昂</li><li>商业⼤模型API调⽤成本⽐较低，但是针对⼿握⾏业专有数据的企业⽽⾔，API接⼝难以满⾜垂直场景⽤户需求，且出于信息安全等考量，他们更希望私有化⽅式</li><li>模型微调、预训练、AI⼯程体系化，⼈才匮乏</li><li>⾏业级应⽤最佳实践少、成熟度、体系化经验不多</li></ul><h1 id="十-⼤模型业务架构"><a href="#十-⼤模型业务架构" class="headerlink" title="十. ⼤模型业务架构"></a>十. ⼤模型业务架构</h1><ul><li><p>看此图即可<br><img src="/img/ai/base.png"></p></li><li><p>AI Embedded 模式</p></li><li><p>AI Copilot 模式</p></li><li><p>代理⼈（Agent）定义<br>代理⼈：环境适应强，有想法且能搞定某件事的⼈</p></li></ul><h1 id="十一-⼤模型架构模式"><a href="#十一-⼤模型架构模式" class="headerlink" title="十一. ⼤模型架构模式"></a>十一. ⼤模型架构模式</h1><p>在新技术、新领域发展过程中，往往依赖⼀些经过实践验证的策略、⽅法和模式。这种观念对于软件⼯程领域的专业⼈⼠来说，已司空⻅惯，设计模式已成为程序员的重要技能。然⽽，当我们转向⼤模型应⽤和⼈⼯智能领域，情况可能会有所不同。⾯对新兴技术，⽬前尚缺乏成熟的设计模式来⽀撑这些解决⽅案</p><p>我根据⼀些⾃⼰的亲身经验和⽹上的最佳实践整理总结⼀些针对⼤模型应⽤的设计⽅法和架构模式，试图应对和解决⼤模型应⽤实现中的⼀些挑战，如常⻅的成本问题、延迟问题以及⽣成的不准确性等</p><ul><li>路由分发模式</li><li>⼤模型代理模式</li><li>⾯向微调的分层缓存策略模式</li><li>知识图谱模式</li><li>记忆认知模式</li><li>双重安全模式</li></ul><h1 id="十二-当前模型排名与提示词"><a href="#十二-当前模型排名与提示词" class="headerlink" title="十二. 当前模型排名与提示词"></a>十二. 当前模型排名与提示词</h1><ul><li>网站： <a href="https://www.superclueai.com/">https://www.superclueai.com/</a></li><li>提示词： <a href="https://docs.anthropic.com/zh-CN/prompt-library/library">https://docs.anthropic.com/zh-CN/prompt-library/library</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>大语言模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>人工智能</tag>
      
      <tag>大语言模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-alertmanager部署对接</title>
    <link href="/2024/07/25/05-alertmanager%E9%83%A8%E7%BD%B2%E5%AF%B9%E6%8E%A5/"/>
    <url>/2024/07/25/05-alertmanager%E9%83%A8%E7%BD%B2%E5%AF%B9%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-alertmanager部署"><a href="#1-alertmanager部署" class="headerlink" title="1.alertmanager部署"></a>1.alertmanager部署</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@prometheus-server ~]<span class="hljs-comment"># wget https://github.com/prometheus/alertmanager/releases/download/v0.22.2/alertmanager-0.22.2.linux-amd64.tar.gz</span><br>[root@prometheus-server ~]<span class="hljs-comment"># tar -xf alertmanager-0.22.2.linux-amd64.tar.gz -C /usr/local/</span><br>[root@prometheus-server ~]<span class="hljs-comment"># cd /usr/local/ &amp;&amp; ln -sv alertmanager-0.22.2.linux-amd64 alertmanager</span><br>[root@prometheus-server ~]<span class="hljs-comment"># cd /usr/local/alertmanager &amp;&amp; mkdir config bin data logs</span><br><br>将配置文件放到config中<br>将日志文件指定到logs中<br>将二进制程序放到<span class="hljs-built_in">bin</span>中<br>[root@prometheus-server alertmanager]<span class="hljs-comment"># mv alertmanager amtool bin/</span><br>[root@prometheus-server alertmanager]<span class="hljs-comment"># mv alertmanager.yml conf/</span><br>[root@prometheus-server alertmanager]<span class="hljs-comment"># mv alertmanager amtool bin/</span><br>[root@prometheus-server alertmanager]<span class="hljs-comment"># vim /usr/lib/systemd/system/alertmanager.service</span><br>[Unit]<br>Description=alertmanager<br>Documentation=https://prometheus.io/<br>After=network.target<br><br>[Service]<br>ExecStart=/usr/local/alertmanager/<span class="hljs-built_in">bin</span>/alertmanager --config.file=/usr/local/alertmanager/config/alertmanager.yml --log.level=info --log.<span class="hljs-built_in">format</span>=json --storage.path=<span class="hljs-string">&quot;/urs/local/alertmanager/data/&quot;</span><br>ExecReload=/<span class="hljs-built_in">bin</span>/kill -HUP $MAINPID<br>ExecStop=/<span class="hljs-built_in">bin</span>/kill -KILL $MAINPID<br><span class="hljs-type">Type</span>=simple<br>Restart=always<br>TimeoutStopSec=20s<br><br>[Install]<br>WantedBy=multi-user.target:<br><br></code></pre></td></tr></table></figure><h1 id="2-告警配置-alertmanager-webhook"><a href="#2-告警配置-alertmanager-webhook" class="headerlink" title="2.告警配置 alertmanager-webhook"></a>2.告警配置 alertmanager-webhook</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">root@VM-<span class="hljs-number">24</span>-<span class="hljs-number">6</span>-ubuntu:usr/local/alertmanager-webhook<span class="hljs-comment"># cat alertmanager-webhook.yaml </span><br><span class="hljs-comment"># 企业微信机器人key</span><br><span class="hljs-comment"># 使用企业微信时必须配置，不使用则留空</span><br>qywechatKey:<br><br><span class="hljs-comment"># 飞书机器人key</span><br><span class="hljs-comment"># 使用飞书时必须配置，不使用则留空</span><br>feishuKey: <span class="hljs-string">&quot;e791jbei-982e-4f6b-b5s09-e739e2fd3a15s&quot;</span><br><br><span class="hljs-comment"># 钉钉机器人key</span><br><span class="hljs-comment"># 使用钉钉时必须配置，不使用则留</span><br>dingdingKey:<br><br><span class="hljs-comment"># Redis配置</span><br>redisServer: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  <span class="hljs-comment"># 必须配置</span><br>redisPort: <span class="hljs-number">6379</span> <span class="hljs-comment"># 可选项，为空默认为6379</span><br>redisPassword: <span class="hljs-string">&quot;12345678&quot;</span> <span class="hljs-comment"># redis未设置密码则留空，如果设置了密码登陆则必须配置</span><br><br><span class="hljs-comment"># 日志配置</span><br>logFileDir:   <span class="hljs-comment"># 可选项，为空则为程序运行目录</span><br>logFilePath: alertmanager-webhook.log <span class="hljs-comment"># 必须配置</span><br><br><span class="hljs-comment"># 服务监听配置</span><br>port: <span class="hljs-number">9095</span> <span class="hljs-comment"># 可选项，为空则默认为9095</span><br>host: <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-comment"># 可选项，为空默认监听 127.0.0.1</span><br></code></pre></td></tr></table></figure><h2 id="2-1-部署alertmanager-webhook使用的redis服务"><a href="#2-1-部署alertmanager-webhook使用的redis服务" class="headerlink" title="2.1 部署alertmanager-webhook使用的redis服务"></a>2.1 部署alertmanager-webhook使用的redis服务</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ docker run -d <span class="hljs-attr">--name</span> redis_alertmanager -<span class="hljs-selector-tag">p</span> <span class="hljs-number">56379</span>:<span class="hljs-number">6379</span> redis:<span class="hljs-number">4</span> redis-server <span class="hljs-attr">--requirepass</span> <span class="hljs-number">12345678</span><br></code></pre></td></tr></table></figure><h2 id="2-2-配置服务管理文件"><a href="#2-2-配置服务管理文件" class="headerlink" title="2.2 配置服务管理文件"></a>2.2 配置服务管理文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">$ vim /etc/systemd/system/alertmanager-webhook.service<br>[Unit]<br>Description=Alertmanager Webhook Service<br>After=network.target<br><br>[Service]<br><span class="hljs-type">Type</span>=simple<br>ExecStart=/usr/local/alertmanager-webhook/alertmanager-webhook -c /usr/local/alertmanager-webhook/alertmanager-webhook.yaml<br>Restart=on-failure<br>User=root<br>Group=root<br>WorkingDirectory=/usr/local/alertmanager-webhook<br><br>[Install]<br>WantedBy=multi-user.target<br><br><span class="hljs-comment">#  启动服务</span><br>$ systemctl enable alertmanager-webhook<br>$ systemctl start alertmanager-webhook<br>$ systemctl status alertmanager-webhook<br><br></code></pre></td></tr></table></figure><h1 id="3-告警测试"><a href="#3-告警测试" class="headerlink" title="3.告警测试"></a>3.告警测试</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># CPU测试</span><br>$ nohup cat /dev/zero&gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br><br>过滤dd 指令获取<span class="hljs-built_in">id</span>号<br>$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `seq <span class="hljs-number">1</span> $(cat /proc/cpuinfo |grep <span class="hljs-string">&quot;physical id&quot;</span> |wc -l)`; do dd <span class="hljs-keyword">if</span>=/dev/zero of=/dev/null &amp; done <br>$ fg<br>$ ctrl + C 结束 <br><span class="hljs-comment"># 强制杀掉</span><br>ps aux |grep -v grep |grep <span class="hljs-string">&quot;dd if&quot;</span>| awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>| xargs -i kill -<span class="hljs-number">9</span> &#123;&#125;<br><br><br><span class="hljs-comment"># 磁盘测试</span><br>$ dd <span class="hljs-keyword">if</span>=/dev/zero of=test1.txt bs=1M count=<span class="hljs-number">40960</span>  40GiB<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>prometheus</tag>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-promettheus-服务配置</title>
    <link href="/2024/07/25/03-promettheus-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/07/25/03-promettheus-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-主配置文件"><a href="#1-主配置文件" class="headerlink" title="1.主配置文件"></a>1.主配置文件</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">global</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">scrape_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">15s</span><br>  <span class="hljs-attribute">evaluation_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">15s</span><br>  <span class="hljs-attribute">query_log_file</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;query.log&#x27;</span><br><br><span class="hljs-attribute">alerting</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">alertmanagers</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">static_configs:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">targets: [&#x27;localhost:9093&#x27;]</span><br><br><span class="hljs-attribute">rule_files</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/local/prometheus/rules/*rules.yml</span><br><br><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-comment"># Prometheus 自身监控配置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;prometheus&#x27;</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">targets: [&#x27;localhost:9090&#x27;]</span><br><br>  <span class="hljs-comment"># 监控 Node Exporter 的配置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;node_exporter&#x27;</span><br>    <span class="hljs-attribute">file_sd_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">files:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/local/prometheus/targets/node_targets.yml</span><br>        <span class="hljs-attribute">refresh_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3s</span><br><br>  <span class="hljs-comment"># 监控 Docker 容器的配置</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;docker&#x27;</span><br>    <span class="hljs-attribute">file_sd_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">files:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/local/prometheus/targets/docker_targets.yml</span><br>        <span class="hljs-attribute">refresh_interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3s</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__address__]</span><br>        <span class="hljs-attribute">regex</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;(.*):\d+&#x27;</span><br>        <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;__address__&#x27;</span><br>        <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;$&#123;1&#125;:9323&#x27;</span><br><br>  <span class="hljs-comment"># 监控mysql  </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;mysql_exporter&#x27;</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">labels:</span><br>          <span class="hljs-attribute">instance</span><span class="hljs-punctuation">:</span> <span class="hljs-string">prod-2024:3306</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">x.x.x.x:9104</span><br></code></pre></td></tr></table></figure><h1 id="2-主目录下路径"><a href="#2-主目录下路径" class="headerlink" title="2.主目录下路径"></a>2.主目录下路径</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/usr/local/prometheus</span><span class="hljs-comment"># ls targets/</span><br>docker_targets.yml  node_targets.yml<br>root<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/usr/local/prometheus</span><span class="hljs-comment"># ls rules/</span><br>container.rules.yml  container.rules.ymlbal  hosts.rules.yml  mysql.rules.yml<br><span class="hljs-comment"># 这里规则信息可以去站点获取： https://samber.github.io/awesome-prometheus-alerts</span><br><br></code></pre></td></tr></table></figure><h1 id="3-查看目标配置情况-其他的都类似"><a href="#3-查看目标配置情况-其他的都类似" class="headerlink" title="3.查看目标配置情况 其他的都类似"></a>3.查看目标配置情况 其他的都类似</h1><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ cat targets/docker_targets.yml </span><br><span class="hljs-attribute">- targets</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;192.168.9.11:9100&#x27;</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cicd</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;192.168.6.10:9100&#x27;</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harbor</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;192.168.9.250:9100&#x27;</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gitlab</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;192.168.9.8:9100&#x27;</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span> <span class="hljs-string">jenkins</span><br></code></pre></td></tr></table></figure><h1 id="4-告警规则文件-这里仅作为示例-具体根据需求增加"><a href="#4-告警规则文件-这里仅作为示例-具体根据需求增加" class="headerlink" title="4.告警规则文件 这里仅作为示例 具体根据需求增加"></a>4.告警规则文件 这里仅作为示例 具体根据需求增加</h1><ul><li>获取网站：  <a href="https://samber.github.io/awesome-prometheus-alerts">https://samber.github.io/awesome-prometheus-alerts</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">root@ubuntu:/usr/local/prometheus#</span> <span class="hljs-string">cat</span> <span class="hljs-string">rules/hosts.rules.yml</span> <br><span class="hljs-attr">groups:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hosts</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HighCPUUsage</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-number">100</span> <span class="hljs-bullet">-</span> <span class="hljs-string">(avg</span> <span class="hljs-string">by</span> <span class="hljs-string">(instance)</span> <span class="hljs-string">(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m]))</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><span class="hljs-string">)</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">15s</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">critical</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;Instance <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> CPU usage is high&quot;</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;CPU usage is above 80% (current value: <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>)&quot;</span><br> <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HighMemoryUsage</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">node_memory_MemAvailable_bytes</span> <span class="hljs-string">/</span> <span class="hljs-string">node_memory_MemTotal_bytes</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span> <span class="hljs-string">&lt;</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">15s</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;Instance <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> memory usage is high&quot;</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Memory usage is below 10% (current value: <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>)&quot;</span><br>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HostOutOfMemory</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">(node_memory_MemAvailable_bytes</span> <span class="hljs-string">/</span> <span class="hljs-string">node_memory_MemTotal_bytes</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span> <span class="hljs-string">&lt;</span> <span class="hljs-number">10</span><span class="hljs-string">)</span> <span class="hljs-string">*</span> <span class="hljs-string">on(instance)</span> <span class="hljs-string">group_left</span> <span class="hljs-string">(nodename)</span> <span class="hljs-string">node_uname_info&#123;nodename=~&quot;.+&quot;&#125;</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">Host</span> <span class="hljs-string">out</span> <span class="hljs-string">of</span> <span class="hljs-string">memory</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Node memory is filling up (&lt; 10% left)\n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>\n  LABELS = <span class="hljs-template-variable">&#123;&#123; $labels &#125;&#125;</span>&quot;</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HostMemoryUnderMemoryPressure</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">(rate(node_vmstat_pgmajfault[1m])</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">1000</span><span class="hljs-string">)</span> <span class="hljs-string">*</span> <span class="hljs-string">on(instance)</span> <span class="hljs-string">group_left</span> <span class="hljs-string">(nodename)</span> <span class="hljs-string">node_uname_info&#123;nodename=~&quot;.+&quot;&#125;</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">Host</span> <span class="hljs-string">memory</span> <span class="hljs-string">under</span> <span class="hljs-string">memory</span> <span class="hljs-string">pressure</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The node is under heavy memory pressure. High rate of major page faults\n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>\n  LABELS = <span class="hljs-template-variable">&#123;&#123; $labels &#125;&#125;</span>&quot;</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HostOutOfDiskSpace</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">((node_filesystem_avail_bytes</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><span class="hljs-string">)</span> <span class="hljs-string">/</span> <span class="hljs-string">node_filesystem_size_bytes</span> <span class="hljs-string">&lt;</span> <span class="hljs-number">10</span> <span class="hljs-string">and</span> <span class="hljs-string">ON</span> <span class="hljs-string">(instance,</span> <span class="hljs-string">device,</span> <span class="hljs-string">mountpoint)</span> <span class="hljs-string">node_filesystem_readonly</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><span class="hljs-string">)</span> <span class="hljs-string">*</span> <span class="hljs-string">on(instance)</span> <span class="hljs-string">group_left</span> <span class="hljs-string">(nodename)</span> <span class="hljs-string">node_uname_info&#123;nodename=~&quot;.+&quot;&#125;</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">Host</span> <span class="hljs-string">out</span> <span class="hljs-string">of</span> <span class="hljs-string">disk</span> <span class="hljs-string">space</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Disk is almost full (&lt; 10% left)\n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>\n  LABELS = <span class="hljs-template-variable">&#123;&#123; $labels &#125;&#125;</span>&quot;</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HostHighCpuLoad</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">(sum</span> <span class="hljs-string">by</span> <span class="hljs-string">(instance)</span> <span class="hljs-string">(avg</span> <span class="hljs-string">by</span> <span class="hljs-string">(mode,</span> <span class="hljs-string">instance)</span> <span class="hljs-string">(rate(node_cpu_seconds_total&#123;mode!=&quot;idle&quot;&#125;[2m])))</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">0.8</span><span class="hljs-string">)</span> <span class="hljs-string">*</span> <span class="hljs-string">on(instance)</span> <span class="hljs-string">group_left</span> <span class="hljs-string">(nodename)</span> <span class="hljs-string">node_uname_info&#123;nodename=~&quot;.+&quot;&#125;</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">Host</span> <span class="hljs-string">high</span> <span class="hljs-string">CPU</span> <span class="hljs-string">load</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;CPU load is &gt; 80%\n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>\n  LABELS = <span class="hljs-template-variable">&#123;&#123; $labels &#125;&#125;</span>&quot;</span><br> <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HostCpuHighIowait</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">(avg</span> <span class="hljs-string">by</span> <span class="hljs-string">(instance)</span> <span class="hljs-string">(rate(node_cpu_seconds_total&#123;mode=&quot;iowait&quot;&#125;[5m]))</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">10</span><span class="hljs-string">)</span> <span class="hljs-string">*</span> <span class="hljs-string">on(instance)</span> <span class="hljs-string">group_left</span> <span class="hljs-string">(nodename)</span> <span class="hljs-string">node_uname_info&#123;nodename=~&quot;.+&quot;&#125;</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">Host</span> <span class="hljs-string">CPU</span> <span class="hljs-string">high</span> <span class="hljs-string">iowait</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;CPU iowait &gt; 10%. A high iowait means that you are disk or network bound.\n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>\n  LABELS = <span class="hljs-template-variable">&#123;&#123; $labels &#125;&#125;</span>&quot;</span><br>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HostUnusualDiskIo</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">(rate(node_disk_io_time_seconds_total[1m])</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">0.5</span><span class="hljs-string">)</span> <span class="hljs-string">*</span> <span class="hljs-string">on(instance)</span> <span class="hljs-string">group_left</span> <span class="hljs-string">(nodename)</span> <span class="hljs-string">node_uname_info&#123;nodename=~&quot;.+&quot;&#125;</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">Host</span> <span class="hljs-string">unusual</span> <span class="hljs-string">disk</span> <span class="hljs-string">IO</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Time spent in IO is too high on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>. Check storage for issues.\n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>\n  LABELS = <span class="hljs-template-variable">&#123;&#123; $labels &#125;&#125;</span>&quot;</span><br><br><br><br></code></pre></td></tr></table></figure><h1 id="5-以上便是配置思路和示例"><a href="#5-以上便是配置思路和示例" class="headerlink" title="5.以上便是配置思路和示例"></a>5.以上便是配置思路和示例</h1><ul><li>网站：  <a href="https://samber.github.io/awesome-prometheus-alerts">https://samber.github.io/awesome-prometheus-alerts</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>prometheus</tag>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-prometheus监控基础</title>
    <link href="/2024/07/25/01-prometheus%E7%9B%91%E6%8E%A7%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/07/25/01-prometheus%E7%9B%91%E6%8E%A7%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Prometheus基础概念"><a href="#一、Prometheus基础概念" class="headerlink" title="一、Prometheus基础概念"></a>一、Prometheus基础概念</h1><p>Prometheus受启发于Google的Brogmon监控系统（相似的Kubernetes是从Google的Brog系统演变而来），从2012年开始由前Google工程师在Soundcloud以开源软件的形式进行研发，并且于2015年早期对外发布早期版本。2016年5月继Kubernetes之后成为第二个正式加入CNCF基金会的项目，同年6月正式发布1.0版本。2017年底发布了基于全新存储层的2.0版本，能更好地与容器平台、云平台配合。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/278129/1627716530483-2c211def-5bca-4faf-87e8-9307a8bf8dac.png#clientId=ub9576979-9d34-4&from=paste&id=u45cdc46f&originHeight=269&originWidth=869&originalType=url&ratio=1&size=57768&status=done&style=none&taskId=u8968f5d9-20a2-44c5-b0aa-156b70c2ec4" alt="image.png"></p><h1 id="1-1、Prometheus的优势"><a href="#1-1、Prometheus的优势" class="headerlink" title="1.1、Prometheus的优势"></a>1.1、Prometheus的优势</h1><p>Prometheus是一个开源的完整监控解决方案，其对传统监控系统的测试和告警模型进行了彻底的颠覆，形成了基于中央化的规则计算、统一分析和告警的新模型。 相比于传统监控系统Prometheus具有以下优点：</p><h2 id="1-1-2、易于管理"><a href="#1-1-2、易于管理" class="headerlink" title="1.1.2、易于管理"></a>1.1.2、易于管理</h2><p>Prometheus核心部分只有一个单独的二进制文件，不存在任何的第三方依赖(数据库，缓存等等)。唯一需要的就是本地磁盘，因此不会有潜在级联故障的风险。<br>Prometheus基于Pull模型的架构方式，可以在任何地方（本地电脑，开发环境，测试环境）搭建我们的监控系统。对于一些复杂的情况，还可以使用Prometheus服务发现(Service Discovery)的能力动态管理监控目标。</p><h2 id="1-1-3、监控服务的内部运行状态"><a href="#1-1-3、监控服务的内部运行状态" class="headerlink" title="1.1.3、监控服务的内部运行状态"></a>1.1.3、监控服务的内部运行状态</h2><p>Pometheus鼓励用户监控服务的内部状态，基于Prometheus丰富的Client库，用户可以轻松的在应用程序中添加对Prometheus的支持，从而让用户可以获取服务和应用内部真正的运行状态。</p><h2 id="1-1-4、强大的数据模型"><a href="#1-1-4、强大的数据模型" class="headerlink" title="1.1.4、强大的数据模型"></a>1.1.4、强大的数据模型</h2><p>所有采集的监控数据均以指标(metric)的形式保存在内置的时间序列数据库当中(TSDB)。所有的样本除了基本的指标名称以外，还包含一组用于描述该样本特征的标签。</p><h2 id="1-1-5、强大的查询语言PromQL"><a href="#1-1-5、强大的查询语言PromQL" class="headerlink" title="1.1.5、强大的查询语言PromQL"></a>1.1.5、强大的查询语言PromQL</h2><p>Prometheus内置了一个强大的数据查询语言PromQL。 通过PromQL可以实现对监控数据的查询、聚合。同时PromQL也被应用于数据可视化(如Grafana)以及告警当中。<br>通过PromQL可以轻松回答类似于以下问题：</p><ul><li>在过去一段时间中95%应用延迟时间的分布范围？</li><li>预测在4小时后，磁盘空间占用大致会是什么情况？</li><li>CPU占用率前5位的服务有哪些？(过滤)</li></ul><h2 id="1-1-6、高效"><a href="#1-1-6、高效" class="headerlink" title="1.1.6、高效"></a>1.1.6、高效</h2><p>对于监控系统而言，大量的监控任务必然导致有大量的数据产生。而Prometheus可以高效地处理这些数据，对于单一Prometheus Server实例而言它可以处理：</p><ul><li>数以百万的监控指标</li><li>每秒处理数十万的数据点。</li></ul><h2 id="1-1-7、可扩展"><a href="#1-1-7、可扩展" class="headerlink" title="1.1.7、可扩展"></a>1.1.7、可扩展</h2><p>Prometheus是如此简单，因此你可以在每个数据中心、每个团队运行独立的Prometheus Sevrer。Prometheus对于联邦集群的支持，可以让多个Prometheus实例产生一个逻辑集群，当单实例Prometheus Server处理的任务量过大时，通过使用功能分区(sharding)+联邦集群(federation)可以对其进行扩展。</p><h2 id="1-1-8、易于集成"><a href="#1-1-8、易于集成" class="headerlink" title="1.1.8、易于集成"></a>1.1.8、易于集成</h2><p>使用Prometheus可以快速搭建监控服务，并且可以非常方便地在应用程序中进行集成。目前支持： Java， JMX， Python， Go，Ruby， .Net， Node.js等等语言的客户端SDK，基于这些SDK可以快速让应用程序纳入到Prometheus的监控当中，或者开发自己的监控数据收集程序。同时这些客户端收集的监控数据，不仅仅支持Prometheus，还能支持Graphite这些其他的监控工具。<br>同时Prometheus还支持与其他的监控系统进行集成：Graphite， Statsd， Collected， Scollector， muini， Nagios等。<br>Prometheus社区还提供了大量第三方实现的监控数据采集支持：JMX， CloudWatch， EC2， MySQL， PostgresSQL， Haskell， Bash， SNMP， Consul， Haproxy， Mesos， Bind， CouchDB， Django， Memcached， RabbitMQ， Redis， RethinkDB， Rsyslog等等。</p><h2 id="1-1-9、可视化"><a href="#1-1-9、可视化" class="headerlink" title="1.1.9、可视化"></a>1.1.9、可视化</h2><p>Prometheus Server中自带了一个Prometheus UI，通过这个UI可以方便地直接对数据进行查询，并且支持直接以图形化的形式展示数据。同时Prometheus还提供了一个独立的基于Ruby On Rails的Dashboard解决方案Promdash。最新的Grafana可视化工具也已经提供了完整的Prometheus支持，基于Grafana可以创建更加精美的监控图标。基于Prometheus提供的API还可以实现自己的监控可视化UI。</p><h2 id="1-1-10、开放性"><a href="#1-1-10、开放性" class="headerlink" title="1.1.10、开放性"></a>1.1.10、开放性</h2><p>通常来说当我们需要监控一个应用程序时，一般需要该应用程序提供对相应监控系统协议的支持。因此应用程序会与所选择的监控系统进行绑定。为了减少这种绑定所带来的限制。对于决策者而言要么你就直接在应用中集成该监控系统的支持，要么就在外部创建单独的服务来适配不同的监控系统。<br>而对于Prometheus来说，使用Prometheus的client library的输出格式不止支持Prometheus的格式化数据，也可以输出支持其它监控系统的格式化数据，比如Graphite。<br>因此你甚至可以在不使用Prometheus的情况下，采用Prometheus的client library来让你的应用程序支持监控数据采集。<br>接下来，在本书当中，将带领读者感受Prometheus是如何对监控系统的重新定义。</p><h2 id="1-1-11核心知识"><a href="#1-1-11核心知识" class="headerlink" title="1.1.11核心知识"></a>1.1.11核心知识</h2><h3 id="1-1-11-1、四个核心组件"><a href="#1-1-11-1、四个核心组件" class="headerlink" title="1.1.11.1、四个核心组件"></a>1.1.11.1、四个核心组件</h3><p>1.服务端采集器(刮擦器，pull Exporter暴露出来的数据) 基于http协议实现; 从被采集端(target)得到样本数据；<br>2.Exporter采集数据端，提供各种服务的exporter数据采集支持；<br>3.AlertManager告警组件，通过内置的PromQL创建告警规则，并对接到告警介质发送告警；<br>4.PushGateway 在不支持pull的场景使用此组件可支持push推送数据；</p><h3 id="1-1-11-2、Server端三种途径来抓取数据"><a href="#1-1-11-2、Server端三种途径来抓取数据" class="headerlink" title="1.1.11.2、Server端三种途径来抓取数据"></a>1.1.11.2、Server端三种途径来抓取数据</h3><ol><li>exporters客户端抓取</li><li>Instrumentation 应用程序自建的监控，内部测量系统抓取</li><li>PushGateway 临时抓取场景</li></ol><p>抓取过啊里的数据，存储在自己的TSDB(Time Series Database)数据中，PromQL 将抓取的数据进行过滤</p><h3 id="1-1-11-3、数据模型-4种"><a href="#1-1-11-3、数据模型-4种" class="headerlink" title="1.1.11.3、数据模型(4种)"></a>1.1.11.3、数据模型(4种)</h3><p>指标类型(metric types),双精度数据类型进行存储</p><p>1.Counter 计数器<br>用于保存单调递增型的数据，如站点访问次数，不能为负数，也不支持减少但可以重置回0；</p><p>2.Gauge 仪表盘<br>上下浮动的数据，例如内存大小、温度、分位数统计；</p><p>3.Histogram 直方图<br>在一段时间范围内对数据进行采样，并将其计入可配置的backet中，分段统计平均值；</p><p>4.Summary 摘要，<br>客户端统计好拿过来的；</p><p>PromQL(Prometheus Query Language, Prometheus内置查询语言)<br>查询出来的结果有多种，时间向量值</p><h1 id="二、PromQL语句"><a href="#二、PromQL语句" class="headerlink" title="二、PromQL语句"></a>二、PromQL语句</h1><p>PromQL(Prometheus Query Language)是Prometheus Server内置数据查询语言<br>1.PromQL使用表达式(expression)来表述查询需求<br>2.根据其使用的指标和标签，以及时间范围，表达式的查询请求可灵活的覆盖在一个或多个时间序列的一定范围内的样本之上，甚至是包含单个时间序列的单个样本、</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2-1、Prometheus时间序列-数据集"><a href="#2-1、Prometheus时间序列-数据集" class="headerlink" title="2.1、Prometheus时间序列(数据集):"></a>2.1、Prometheus时间序列(数据集):</h2><p>时间序列数据，按照时间顺序记录系统，设备状态变化的数据，每个数据称为一个样本;</p><ol><li><p>数据采集以特定的时间轴进行，因而，随着时间流逝，将这些样本数据纪律下来，将生成一个离散的样本数据序列;</p></li><li><p>该序列也称为向量(Vector),而将多个序列放在同一个坐标系内(以时间为横轴，以序列为纵轴),将形成一个有数据点组成的矩阵;</p></li></ol><p>Prometheus基于指标名称(metrics name)以及附属的标签集(labelset)唯一定义一条时间序列<br>1.指标名称代表着监控目标上某类可测量属性的基本特征表示<br>2.标签则是这个基本特征上再次细分的多个可测量维度</p><p>基于PromQL表达式，用户可以针对指定的特征及细分的维度进行过滤，聚合统计等运算从而产生期望的计算结果；</p><h2 id="2-2、Prometheus数据模型："><a href="#2-2、Prometheus数据模型：" class="headerlink" title="2.2、Prometheus数据模型："></a>2.2、Prometheus数据模型：</h2><p>Prometheus中，每个时间序列都由指标名称(metric Name)和标签(Label)来唯一标识<br>格式为”<metric name>{label name}&#x3D;<label value>,…”;</p><p>指标名称：通常用于描述系统上要测丢你个的某个特征(例如: httpreqyests_total 表示接收到的HTTP请求总数)；<br>标签： 键值型数据，附加在指标名称之上，从而让指标能能够支持多个维度特征; 可选项；</p><p>注意:  __ 开头的标签不要使用，一般用于系统默认格式</p><h2 id="2-3、指标名称及标签使用注意事项"><a href="#2-3、指标名称及标签使用注意事项" class="headerlink" title="2.3、指标名称及标签使用注意事项"></a>2.3、指标名称及标签使用注意事项</h2><p>指标名称和标签的特定组合代表着一个时间序列<br>    1. 指标名称相同，但标签不同的组合分别代表着不同的时序列<br>    2. 不同的指标名称自然更是代表着不同的时间序列</p><p><strong>PromQL支持基于定义的指标维度进行过滤和聚合</strong></p><ol><li>更改任标签值，包括添加和删除标签，都会创建一个新的时间序列</li><li>应该尽可能的保持标签的稳定性，否则，则可能创建新的时间序列，更甚者会声称要给动态的数据环境，并是的监控的数据源难以跟踪，从而导致建立在该指标之上的图形、告警记录到规则变得无效</li></ol><h2 id="2-4、PromQL数据类型"><a href="#2-4、PromQL数据类型" class="headerlink" title="2.4、PromQL数据类型"></a>2.4、PromQL数据类型</h2><h3 id="2-4-1、PromQL的表达式中支持4中数据类型"><a href="#2-4-1、PromQL的表达式中支持4中数据类型" class="headerlink" title="2.4.1、PromQL的表达式中支持4中数据类型"></a>2.4.1、PromQL的表达式中支持4中数据类型</h3><h4 id="2-4-1-2、即时向量-Instant-Vector"><a href="#2-4-1-2、即时向量-Instant-Vector" class="headerlink" title="2.4.1.2、即时向量(Instant Vector):"></a>2.4.1.2、即时向量(Instant Vector):</h4><p>特定或全部的时间序列集合上， 具有相同时间戳的一组样本值称为即时向量；</p><h4 id="2-4-1-3、范围向量-Range-Vector"><a href="#2-4-1-3、范围向量-Range-Vector" class="headerlink" title="2.4.1.3、范围向量(Range Vector):"></a>2.4.1.3、范围向量(Range Vector):</h4><p>特定或全部的时间系列集合上，值再定的同意时间范围内的所有样本值；</p><h4 id="2-4-1-4、标量-Scalar"><a href="#2-4-1-4、标量-Scalar" class="headerlink" title="2.4.1.4、标量(Scalar):"></a>2.4.1.4、标量(Scalar):</h4><p>一个浮点型的数据值；</p><h4 id="2-4-1-5、字符串-String-："><a href="#2-4-1-5、字符串-String-：" class="headerlink" title="2.4.1.5、字符串(String)："></a>2.4.1.5、字符串(String)：</h4><p>支持使用单引号、双引号或反引号，但是反引号中不会对转移字符进行转义</p><h2 id="2-5、PromQL指标类型"><a href="#2-5、PromQL指标类型" class="headerlink" title="2.5、PromQL指标类型"></a>2.5、PromQL指标类型</h2><pre><code class="hljs">四个指标类型，主要由prometheus的客户端库使用</code></pre><h3 id="2-5-1、Counter-计数器"><a href="#2-5-1、Counter-计数器" class="headerlink" title="2.5.1、Counter 计数器"></a>2.5.1、Counter 计数器</h3><p>单调递增，除非重置</p><h3 id="2-5-2、Gauge-仪表盘"><a href="#2-5-2、Gauge-仪表盘" class="headerlink" title="2.5.2、Gauge  仪表盘"></a>2.5.2、Gauge  仪表盘</h3><p>可增可减的数据</p><h3 id="2-5-3、Histogram-直方图"><a href="#2-5-3、Histogram-直方图" class="headerlink" title="2.5.3、Histogram 直方图"></a>2.5.3、Histogram 直方图</h3><p>将时间范围内的数据划分成不同的时间段，并各自评估其样本个数及样本值之和，因而可计算出分位数</p><h3 id="2-5-4、Summary"><a href="#2-5-4、Summary" class="headerlink" title="2.5.4、Summary"></a>2.5.4、Summary</h3><p>类似于Histogram，但客户端会直接计算并上报分位数</p><h2 id="2-6、PromQL运算符"><a href="#2-6、PromQL运算符" class="headerlink" title="2.6、PromQL运算符"></a>2.6、PromQL运算符</h2><pre><code class="hljs">指标标识: &lt;netric_name&gt;&#123;label=value,...&#125;过滤时间序列:metric_name: 只查询该指标名称下的所有时间序列</code></pre><h3 id="2-6-1、查询匹配器"><a href="#2-6-1、查询匹配器" class="headerlink" title="2.6.1、查询匹配器"></a>2.6.1、查询匹配器</h3><h4 id="2-6-1-1、比较符"><a href="#2-6-1-1、比较符" class="headerlink" title="2.6.1.1、比较符"></a>2.6.1.1、比较符</h4><p>{}: &#x3D;, !&#x3D;, &#x3D;<del>, !</del><br>&#x3D; 等于<br>!&#x3D; 不等于<br>&#x3D;~ 模式匹配<br>!~ 不匹配</p><h4 id="2-6-1-2、返回值的四种类型"><a href="#2-6-1-2、返回值的四种类型" class="headerlink" title="2.6.1.2、返回值的四种类型"></a>2.6.1.2、返回值的四种类型</h4><p>即时向量<br>范围向量<br>标量<br>字符串</p><h3 id="2-6-2、PromQL聚合函数"><a href="#2-6-2、PromQL聚合函数" class="headerlink" title="2.6.2、PromQL聚合函数"></a>2.6.2、PromQL聚合函数</h3><pre><code class="hljs">多个target上的同一个指标进行统计内置提供了11个聚合函数，仅支持用于单个即时向量的元素sum() 对样本值求和avg() 对样本值求平局值count() 对分组内的时间序列进行数量统计stddev() 对样本值求标准差，了解数据波动大小 stdvar() 对样本值求方差，他是求取标准差过程中的中间状态min()  求取样本值中的最小者max()  求取样本值中的最大者topk() 逆序返回分组内的样本值最大的前k个时间序列和它的值 取最大的值bottomk() 顺序返回组内的样本值最小的前K个时间序列和它的值  取最小的值quantile() 分位数用于评估数据的分布状态，该会返回分组内指定的分位数的值，即数值落在小于等于指定的分为区间的比例count_values() 对分株内的时间序列的样本值进行数量统计</code></pre><h3 id="2-6-3、普通函数"><a href="#2-6-3、普通函数" class="headerlink" title="2.6.3、普通函数"></a>2.6.3、普通函数</h3><pre><code class="hljs">    官网地址: [https://prometheus.io/docs/prometheus/latest/querying/functions/](https://prometheus.io/docs/prometheus/latest/querying/functions/)    abs()    absent()    absent_over_time()    ceil()    changes()    clamp()    clamp_max()    clamp_min()    day_of_month()    day_of_week()    days_in_month()    delta()    deriv()    exp()    floor()    histogram_quantile()    holt_winters()    hour()    idelta()    increase()    irate()    label_join()    label_replace()    ln()    log2()    log10()    minute()    month()    predict_linear()    rate()    resets()    round()    scalar()    sgn()    sort()    sort_desc()    sqrt()    time()    timestamp()    vector()    year()    &lt;aggregation&gt;_over_time()</code></pre><h3 id="2-6-4、二元运算符-Binary-Operators"><a href="#2-6-4、二元运算符-Binary-Operators" class="headerlink" title="2.6.4、二元运算符(Binary Operators)"></a>2.6.4、二元运算符(Binary Operators)</h3><p>PromQL支持基本的算术运算和逻辑运算，这剋运算支持使用操作符链接两个操作数，因而也称为二元运算符或二元操作符;</p><pre><code class="hljs">    算术运算:</code></pre><p>+(加)、 -(减)、 *(乘)、 &#x2F;(除)、 %(取模)、 ^(幂运算)；</p><pre><code class="hljs">    比较运算:</code></pre><p>&#x3D;&#x3D;(等值比较)、!&#x3D;(不等于)、&gt;(大于)、&lt;(小于)、&gt;&#x3D;(大于等于)、&gt;&#x3D;(小于等于) ；</p><pre><code class="hljs">    逻辑/集合运算:</code></pre><p>and(并且)、or(或者)、unless(除了) ；<br>{目前该运算仅允许在两个即时向量间进行，尚不支持标量参与运算}</p><h1 id="三、Grafana看板组件"><a href="#三、Grafana看板组件" class="headerlink" title="三、Grafana看板组件"></a>三、Grafana看板组件</h1><h2 id="3-1、基础概念"><a href="#3-1、基础概念" class="headerlink" title="3.1、基础概念"></a>3.1、基础概念</h2><p>持久化的场景，我们将通过promQL规则查询数据，而这个规则在Prometheus中查询后刷新就没了，表达式无法做到持久化使用，而要实现这种需求，就可以结合grafana进行实现</p><p>直接安装，并添加数据源即可展示监控图标; 监控图标可在官方站点下载别人分享的优秀示例。</p><h2 id="3-2、模板使用"><a href="#3-2、模板使用" class="headerlink" title="3.2、模板使用"></a>3.2、模板使用</h2><p>视图下载官方地址: <a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a><br>根据数据源搜索即可下载，也可以复制模板ID号导入到面板中</p><h1 id="四、Alertmanager告警组件"><a href="#四、Alertmanager告警组件" class="headerlink" title="四、Alertmanager告警组件"></a>四、Alertmanager告警组件</h1><h2 id="4-1、基础概念"><a href="#4-1、基础概念" class="headerlink" title="4.1、基础概念"></a>4.1、基础概念</h2><p>除了基本的告警通知能力外alertmanager还支持对告警进行去重、分组、抑制、静默和路由等功能</p><p>**分组(grouping) **<br>将相似告警合并为单个告警通知的机制，在系统因大面积故障而处罚告警潮时，分组机制能避免用户被大量的告警噪声淹没，进而导致关键信息的隐没</p><p><strong>抑制(Inhibition)</strong><br>系统中某个组件或服务故障而触发告警通知后，那些依赖于该组件或服务的其他组件或服务可能会因此而处罚告警，抑制便是避免类似的级联告警的一种特性，从而让用户能将精力集中于真正的故障所在</p><p><strong>静默(Silent)</strong><br>是指在一个特定的时间窗口内，即便接收到告警通知，。Alertmanger也不会真正想用户发送告警信息的行为，通常，在系统例行维护期间，需要激活告警系统的静默特性；</p><p><strong>路由(route)</strong><br>用户配置Alertmanager如何处理传入的特定类型的告警通知，其基本逻辑是根据路与欧匹配规则的匹配结果来确定处理当前告警路径和行为</p><h2 id="4-2、高级规则模板"><a href="#4-2、高级规则模板" class="headerlink" title="4.2、高级规则模板"></a>4.2、高级规则模板</h2><p>高级规则文件如果在服务器需求比较多的情况下，对于高级规则的编写也是一个不小的工作量，但是在github中有着不错的优秀模板，我们可以开箱即用，模板地址: <a href="https://github.com/samber/awesome-prometheus-alerts">https://github.com/samber/awesome-prometheus-alerts</a></p><p>规则模板官方地址: <a href="https://awesome-prometheus-alerts.grep.to/">https://awesome-prometheus-alerts.grep.to</a> , 直接下载对接使用即可。</p>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>prometheus</tag>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-prometheus-server部署</title>
    <link href="/2024/07/25/02-prometheus-server%E9%83%A8%E7%BD%B2-1/"/>
    <url>/2024/07/25/02-prometheus-server%E9%83%A8%E7%BD%B2-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h1><p>基于云主机进行部署，其他主机环境问题请自行解决或初始化之后进行操作</p><h2 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h2><table><thead><tr><th><strong>IP地址</strong></th><th><strong>操作系统</strong></th><th><strong>组件安排</strong></th></tr></thead><tbody><tr><td>172.17.88.230</td><td>Centos7.9</td><td>Prometheus-server&#x2F;Alertmanager</td></tr><tr><td>172.17.88.231</td><td>Centos7.9</td><td>node</td></tr><tr><td>172.17.88.232</td><td>Centos7.9</td><td>Grafana</td></tr></tbody></table><h2 id="服务器初始化"><a href="#服务器初始化" class="headerlink" title="服务器初始化"></a>服务器初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ systemctl stop firewalld.service<br>$ systemctl <span class="hljs-built_in">disable</span> firewalld.service<br>$ setenforce 0<br>$ sed -i <span class="hljs-string">&#x27;s/enforcing/disabled/g&#x27;</span> /etc/selinux/config<br></code></pre></td></tr></table></figure><p>官方文档： <a href="https://prometheus.io/docs/introduction/overview/">https://prometheus.io/docs/introduction/overview/</a><br>安装包下载: <a href="https://prometheus.io/download/">https://prometheus.io/download/</a><br>全部组件使用最新版本</p><h1 id="一、Prometheus-server部署"><a href="#一、Prometheus-server部署" class="headerlink" title="一、Prometheus-server部署"></a>一、Prometheus-server部署</h1><h2 id="1-1、下载包并解压Prometheus-server安装包"><a href="#1-1、下载包并解压Prometheus-server安装包" class="headerlink" title="1.1、下载包并解压Prometheus-server安装包"></a>1.1、下载包并解压Prometheus-server安装包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@prometheus-server ~]# wget https://github.com/prometheus/prometheus/releases/download/v2.28.1/prometheus-2.28.1.linux-amd64.tar.gz<br>[root@prometheus-server ~]# tar -xf prometheus-2.28.1.linux-amd64.tar.gz -C /usr/local/<br>[root@prometheus-server ~]# <span class="hljs-built_in">cd</span> !$ &amp;&amp; <span class="hljs-built_in">ln</span> -sv prometheus-2.28.1.linux-amd64 prometheus<br><span class="hljs-built_in">cd</span> /usr/local/ &amp;&amp; <span class="hljs-built_in">ln</span> -sv prometheus-2.28.1.linux-amd64 prometheus<br></code></pre></td></tr></table></figure><h2 id="1-2、主配置文件配置并启动-单机部署"><a href="#1-2、主配置文件配置并启动-单机部署" class="headerlink" title="1.2、主配置文件配置并启动(单机部署)"></a>1.2、主配置文件配置并启动(单机部署)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@prometheus-server prometheus]# <span class="hljs-built_in">cd</span> /usr/local/prometheus/ &amp;&amp; <span class="hljs-built_in">cp</span> -p prometheus.yml prometheus.ymlbak<br>[root@prometheus-server prometheus]# vim prometheus.yml<br>global: <span class="hljs-comment"># 全局配置</span><br>  scrape_interval:     10s <span class="hljs-comment"># 抓取时间</span><br>  evaluation_interval: 10s <span class="hljs-comment"># 规则引擎轮询时间</span><br>  query_log_file: <span class="hljs-string">&#x27;query.log&#x27;</span> <span class="hljs-comment"># promQL查询日志</span><br><br><span class="hljs-comment"># 告警对接配置</span><br>alerting:<br>  alertmanagers:<br>  - file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/alertmanager-server.yaml<br><br><span class="hljs-comment"># 规则引擎具体规则配置</span><br>rule_files:<br>  - /usr/local/prometheus/rules/*.yaml<br>  <span class="hljs-comment"># 添加告警规则</span><br>  - /usr/local/prometheus/alerting_rules/*.yaml<br><br>scrape_configs: <span class="hljs-comment"># 抓取配置</span><br>  - job_name: <span class="hljs-string">&#x27;prometheus&#x27;</span><br>    basic_auth:<br>      username: admin<br>      password: 123123<br>    file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/prometheus*.yaml<br>      refresh_interval: 1m<br><br>  - job_name: <span class="hljs-string">&#x27;alertmanager-server&#x27;</span><br>    file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/alertmanager*.yaml<br>      refresh_interval: 1m<br><br>  - job_name: <span class="hljs-string">&#x27;granafa-server&#x27;</span><br>    file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/grafana*.yaml<br>      refresh_interval: 1m<br><br>  - job_name: <span class="hljs-string">&#x27;nodes&#x27;</span><br>    file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/nodes*.yaml<br>      refresh_interval: 1m<br><br><br><br><span class="hljs-comment"># 创建目录备用</span><br>[root@prometheus-server prometheus]# <span class="hljs-built_in">mkdir</span> /usr/local/prometheus/rules<br>[root@prometheus-server prometheus]# <span class="hljs-built_in">mkdir</span> /usr/local/prometheus/targets<br>[root@prometheus-server prometheus]# <span class="hljs-built_in">mkdir</span> /usr/local/prometheus/alerting_rules<br><br><br><br><span class="hljs-comment"># systemd管理文件配置</span><br>[root@os7server prometheus]# vim /usr/lib/systemd/system/prometheus.service<br>[Unit]<br>Description=Prometheus Node Exporter<br>After=network.target<br><br>[Service]<br>ExecStart=/usr/local/prometheus/prometheus --web.config.file=/usr/local/prometheus/webConfig.yaml \<br>    --config.file=/usr/local/prometheus/prometheus.yml \<br>    --web.read-timeout=5m \<br>    --web.max-connections=10 \<br>    --storage.tsdb.retention=7d \<br>    --storage.tsdb.path=/usr/local/prometheus/data \<br>    --query.max-concurrency=2000 \<br>    --query.timeout=2m<br>[Install]<br>WantedBy=multi-user.target<br><br><br><span class="hljs-comment"># 开机启动</span><br>[root@prometheus-server prometheus]# systemctl <span class="hljs-built_in">enable</span> prometheus.service<br>Created symlink from /etc/systemd/system/multi-user.target.wants/prometheus.service to /usr/lib/systemd/system/prometheus.service.<br><br><br><br><span class="hljs-comment"># 基础页面访问认证添加</span><br><span class="hljs-comment"># 生成basic_auth配置</span><br><span class="hljs-comment"># 参数 --web.config.file=/usr/local/prometheus/webConfig.yaml</span><br><span class="hljs-comment"># web.basicAuth 认证配置 --web.config.file=&quot;&quot; </span><br><span class="hljs-comment"># https配置，basicAuth配置</span><br><span class="hljs-comment"># 官网地址: https://prometheus.io/docs/prometheus/latest/configuration/https/</span><br><br><span class="hljs-comment"># 密码使用apache的工具生成</span><br>[root@prometheus-server prometheus]# yum install -y httpd-tools<br>[root@prometheus-server prometheus]# htpasswd -Bn admin<br>New password:<br>Re-<span class="hljs-built_in">type</span> new password:<br>admin:$2y$05<span class="hljs-variable">$EdMgHh2IF1izSh6lt1Fp7e98jtvtAtd4</span>/cCm.wEYTpzY5h/v7fDlq<br>明文: alinx@123<br><br><br><span class="hljs-comment"># 基于base64编码，密码传输时获取后即可破解</span><br>[root@prometheus-server prometheus]# vim /usr/local/prometheus/webConfig.yaml<br>basic_auth_users:<br>  admin: <span class="hljs-string">&quot;$2y$05<span class="hljs-variable">$EdMgHh2IF1izSh6lt1Fp7e98jtvtAtd4</span>/cCm.wEYTpzY5h/v7fDlq&quot;</span><br>  alinx: <span class="hljs-string">&quot;$2y$05<span class="hljs-variable">$EdMgHh2IF1izSh6lt1Fp7e98jtvtAtd4</span>/cCm.wEYTpzY5h/v7fDlq&quot;</span><br>  <br><span class="hljs-comment"># 主配置文件中增加了 basic_auth 字段就是基于此进行的</span><br>global: <span class="hljs-comment"># 全局配置</span><br>  scrape_interval:     10s <span class="hljs-comment"># 抓取时间</span><br>  evaluation_interval: 10s <span class="hljs-comment"># 规则引擎轮询时间</span><br>  query_log_file: <span class="hljs-string">&#x27;query.log&#x27;</span> <span class="hljs-comment"># promQL查询日志</span><br><br><span class="hljs-comment"># 告警对接配置</span><br>alerting:<br>  alertmanagers:<br>  - file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/alertmanager-server.yaml<br><br><span class="hljs-comment"># 规则引擎具体规则配置</span><br>rule_files:<br>  - /usr/local/prometheus/rules/*.yaml<br>  <span class="hljs-comment"># 添加告警规则</span><br>  - /usr/local/prometheus/alerting_rules/*.yaml<br><br>scrape_configs: <span class="hljs-comment"># 抓取配置</span><br>  - job_name: <span class="hljs-string">&#x27;prometheus&#x27;</span><br>    basic_auth:<br>      username: admin<br>      password: alinx@123<br>    file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/prometheus*.yaml<br>      refresh_interval: 30s<br><br>  - job_name: <span class="hljs-string">&#x27;alertmanager-server&#x27;</span><br>    file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/alertmanager*.yaml<br>      refresh_interval: 30s<br><br>  - job_name: <span class="hljs-string">&#x27;granafa-server&#x27;</span><br>    file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/grafana*.yaml<br>      refresh_interval: 30s<br><br>  - job_name: <span class="hljs-string">&#x27;nodes&#x27;</span><br>    file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/nodes*.yaml<br>      refresh_interval: 30s<br><br><br><br><br><span class="hljs-comment"># 启动Prometheus-server服务  </span><br><br>[root@prometheus-server prometheus]# systemctl start prometheus.service<br>[root@prometheus-server prometheus]# systemctl status prometheus.service<br>● prometheus.service - Prometheus Node Exporter<br>   Loaded: loaded (/usr/lib/systemd/system/prometheus.service; enabled; vendor preset: disabled)<br>   Active: active (running) since Fri 2021-07-30 16:35:06 CST; 5s ago<br> Main PID: 20439 (prometheus)<br>   CGroup: /system.slice/prometheus.service<br>           └─20439 /usr/local/prometheus/prometheus --web.config.file=/usr/local/prometheus/webConfig.yaml --config.file=/usr/local/prometheus/prometheus.yml --web.read-timeout=5m --web.max-connectio...<br><br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.197Z <span class="hljs-built_in">caller</span>=head.go:780 component=tsdb msg=<span class="hljs-string">&quot;Replaying on-disk memory mappable chunks if any&quot;</span><br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.197Z <span class="hljs-built_in">caller</span>=head.go:794 component=tsdb msg=<span class="hljs-string">&quot;On-disk memory mappable chunks replay completed&quot;</span> duration=5.397µs<br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.197Z <span class="hljs-built_in">caller</span>=head.go:800 component=tsdb msg=<span class="hljs-string">&quot;Replaying WAL, this may take a while&quot;</span><br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.198Z <span class="hljs-built_in">caller</span>=head.go:854 component=tsdb msg=<span class="hljs-string">&quot;WAL segment loaded&quot;</span> segment=0 maxSegment=0<br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.198Z <span class="hljs-built_in">caller</span>=head.go:860 component=tsdb msg=<span class="hljs-string">&quot;WAL replay completed&quot;</span> checkpoint_replay_duration=16.997µ…tion=204.784µs<br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.198Z <span class="hljs-built_in">caller</span>=main.go:851 fs_type=EXT4_SUPER_MAGIC<br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.198Z <span class="hljs-built_in">caller</span>=main.go:854 msg=<span class="hljs-string">&quot;TSDB started&quot;</span><br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.198Z <span class="hljs-built_in">caller</span>=main.go:981 msg=<span class="hljs-string">&quot;Loading configuration file&quot;</span> filename=/usr/local/prometheus/prometheus.yml<br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.200Z <span class="hljs-built_in">caller</span>=main.go:1012 msg=<span class="hljs-string">&quot;Completed loading of configuration file&quot;</span> filename=/usr/local/prometheus/prometheus…µs<br>Jul 30 16:35:06 prometheus-server prometheus[20439]: level=info ts=2021-07-30T08:35:06.200Z <span class="hljs-built_in">caller</span>=main.go:796 msg=<span class="hljs-string">&quot;Server is ready to receive web requests.&quot;</span><br>Hint: Some lines were ellipsized, use -l to show <span class="hljs-keyword">in</span> full.<br><br><br></code></pre></td></tr></table></figure><h2 id="1-3、访问测试"><a href="#1-3、访问测试" class="headerlink" title="1.3、访问测试"></a>1.3、访问测试</h2><p><a href="http://172.17.88.230:9090/metric">http://172.17.88.230:9090/metric</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/278129/1627718150790-212cf521-9ae1-457e-b408-30ed68221eda.png#clientId=u5823aafd-c106-4&from=paste&height=600&id=uc211d0e5&originHeight=600&originWidth=1186&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45872&status=done&style=none&taskId=u1a6ba3e9-acb7-4c8e-a899-318cf4cc303&title=&width=1186" alt="image.png"></p><p>可能会出现时间同步问题，那就把时间同步做一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yum install -y ntp<br>$ vim /etc/ntp.conf<br>driftfile /var/lib/ntp/drift<br>restrict default nomodify notrap nopeer noquery<br>restrict 127.0.0.1<br>restrict ::1<br><span class="hljs-comment"># 手动添加配置</span><br>server ntp1.aliyun.com prefer<br>server ntp2.aliyun.com<br><span class="hljs-comment"># 原有配置</span><br>server 0.centos.pool.ntp.org iburst<br>server 1.centos.pool.ntp.org iburst<br>server 2.centos.pool.ntp.org iburst<br>server 3.centos.pool.ntp.org iburst<br>includefile /etc/ntp/crypto/pw<br>keys /etc/ntp/keys<br><span class="hljs-built_in">disable</span> monitor<br></code></pre></td></tr></table></figure><h2 id="1-4、Prometheus-server自身监控自动发现配置文件编写"><a href="#1-4、Prometheus-server自身监控自动发现配置文件编写" class="headerlink" title="1.4、Prometheus-server自身监控自动发现配置文件编写"></a>1.4、Prometheus-server自身监控自动发现配置文件编写</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@prometheus-server prometheus]# vim /usr/local/prometheus/targets/prometheus-servers.yaml<br>- targets:<br>  - 172.17.88.230:9090<br>  labels:<br>    app: prometheus-server<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>主配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">global: <span class="hljs-comment"># 全局配置</span><br>  scrape_interval:     10s <span class="hljs-comment"># 抓取时间</span><br>  evaluation_interval: 10s <span class="hljs-comment"># 规则引擎轮询时间</span><br>  query_log_file: <span class="hljs-string">&#x27;query.log&#x27;</span> <span class="hljs-comment"># promQL查询日志</span><br><br><span class="hljs-comment"># 告警对接配置 通过基于文件的服务发现</span><br>alerting:<br>  alertmanagers:<br>  - file_sd_configs:<br>    - files:<br>      - /usr/local/prometheus/targets/alertmanager-server.yaml<br><br><span class="hljs-comment"># 规则引擎具体规则配置</span><br>rule_files:<br><span class="hljs-comment"># 添加告警规则 告警规则定义目录，根据此进行告警通知</span><br>  - /usr/local/prometheus/rules/*.yaml<br>  - /usr/local/prometheus/alerting_rules/*.yaml<br><br>scrape_configs: <span class="hljs-comment"># 抓取配置</span><br>  - job_name: <span class="hljs-string">&#x27;prometheus&#x27;</span><br>    basic_auth: <span class="hljs-comment"># 认证配置</span><br>      username: admin<br>      password: alinx@123<br>    file_sd_configs: <span class="hljs-comment"># 基于文件的自动发现</span><br>    - files:<br>      - /usr/local/prometheus/targets/prometheus*.yaml<br>      refresh_interval: 30s<br><span class="hljs-comment"># 告警组件自动发现</span><br>  - job_name: <span class="hljs-string">&#x27;alertmanager-server&#x27;</span><br>    file_sd_configs: <span class="hljs-comment"># 基于文件的自动发现</span><br>    - files:<br>      - /usr/local/prometheus/targets/alertmanager*.yaml<br>      refresh_interval: 30s<br><span class="hljs-comment"># grafana-server监控</span><br>  - job_name: <span class="hljs-string">&#x27;grafana-server&#x27;</span><br>    file_sd_configs: <span class="hljs-comment"># 基于文件的自动发现</span><br>    - files:<br>      - /usr/local/prometheus/targets/grafana*.yaml<br>      refresh_interval: 30s<br><br><span class="hljs-comment"># 监控节点</span><br>  - job_name: <span class="hljs-string">&#x27;nodes&#x27;</span><br>    file_sd_configs: <span class="hljs-comment"># 基于文件的自动发现</span><br>    - files:<br>      - /usr/local/prometheus/targets/nodes*.yaml<br>      refresh_interval: 30s<br></code></pre></td></tr></table></figure><p>再次访问测试<br><a href="http://172.17.88.230:9090/">http://172.17.88.230:9090</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/278129/1627718834920-fa0215ea-f1f3-48d4-84c1-5e7b70397e90.png#clientId=u5823aafd-c106-4&from=paste&height=761&id=ud65d36b1&originHeight=761&originWidth=1915&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57204&status=done&style=none&taskId=u1342dbe8-a069-4756-814c-ab97d9899a1&title=&width=1915" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/278129/1627718853483-cc62c920-043a-4908-93b0-774c5f6adc4e.png#clientId=u5823aafd-c106-4&from=paste&height=797&id=ua1f5beb0&originHeight=797&originWidth=1700&originalType=binary&ratio=1&rotation=0&showTitle=false&size=70346&status=done&style=none&taskId=u33d4a521-ce01-4dde-85b4-f62101cd059&title=&width=1700" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-grafana部署对接</title>
    <link href="/2024/07/25/04-grafana%E9%83%A8%E7%BD%B2%E5%AF%B9%E6%8E%A5/"/>
    <url>/2024/07/25/04-grafana%E9%83%A8%E7%BD%B2%E5%AF%B9%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>安装Grafana监控面板安装方式众多，源码安装，二进制安装，rpm包安装，docker安装</strong></p><h1 id="Docker方式安装Grafana"><a href="#Docker方式安装Grafana" class="headerlink" title="Docker方式安装Grafana"></a>Docker方式安装Grafana</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装docker</span><br>[root@monitor-views ~]# <span class="hljs-built_in">sudo</span> yum remove docker \<br>&gt;                   docker-client \<br>&gt;                   docker-client-latest \<br>&gt;                   docker-common \<br>&gt;                   docker-latest \<br>&gt;                   docker-latest-logrotate \<br>&gt;                   docker-logrotate \<br>&gt;                   docker-engine<br>Loaded plugins: fastestmirror<br>No Match <span class="hljs-keyword">for</span> argument: docker<br>No Match <span class="hljs-keyword">for</span> argument: docker-client<br>No Match <span class="hljs-keyword">for</span> argument: docker-client-latest<br>No Match <span class="hljs-keyword">for</span> argument: docker-common<br>No Match <span class="hljs-keyword">for</span> argument: docker-latest<br>No Match <span class="hljs-keyword">for</span> argument: docker-latest-logrotate<br>No Match <span class="hljs-keyword">for</span> argument: docker-logrotate<br>No Match <span class="hljs-keyword">for</span> argument: docker-engine<br>No Packages marked <span class="hljs-keyword">for</span> removal<br><br><br><br>[root@monitor-views ~]# <span class="hljs-built_in">sudo</span> yum install -y yum-utils \<br>&gt;   device-mapper-persistent-data \<br>&gt;   lvm2<br>Loaded plugins: fastestmirror<br>Determining fastest mirrors<br>base     | 3.6 kB  00:00:00<br>epel    | 4.7 kB  00:00:00<br>extras| 2.9 kB  00:00:00<br>updates | 2.9 kB  00:00:00<br>(1/7): epel/x86_64/group_gz         |  96 kB  00:00:00<br>(2/7): base/7/x86_64/group_gz       <br>......<br>device-mapper-event.x86_64 7:1.02.170-6.el7_9.5       device-mapper-event-libs.x86_64 7:1.02.170-6.el7_9.5       libaio.x86_64 0:0.3.109-13.el7            libxml2-python.x86_64 0:2.9.1-6.el7.5<br>lvm2-libs.x86_64 7:2.02.187-6.el7_9.5                 python-chardet.noarch 0:2.2.1-3.el7                        python-kitchen.noarch 0:1.1.1-5.el7<br><br>Complete!<br><br><br><span class="hljs-comment"># 阿里云镜像源地址</span><br>[root@monitor-views ~]# <span class="hljs-built_in">sudo</span> yum-config-manager \<br>&gt;     --add-repo \<br>&gt;     http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>Loaded plugins: fastestmirror<br>adding repo from: http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>grabbing file http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo<br>repo saved to /etc/yum.repos.d/docker-ce.repo<br><br><span class="hljs-comment"># 清华大学源</span><br>$ <span class="hljs-built_in">sudo</span> yum-config-manager \<br>--add-repo \<br>https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo<br><br><span class="hljs-comment"># 安装</span><br>[root@monitor-views ~]# <span class="hljs-built_in">sudo</span> yum install docker-ce docker-ce-cli containerd.io -y<br>[root@monitor-views ~]# <span class="hljs-built_in">mkdir</span> /etc/docker<br>[root@monitor-views ~]# vim /etc/docker/daemon.json<br>&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://reg-mirror.qiniu.com/&quot;</span>]<br>&#125;<br><br><span class="hljs-comment"># 启动</span><br>[root@monitor-views ~]# systemctl <span class="hljs-built_in">enable</span> docker<br>Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.<br>[root@monitor-views ~]# systemctl start docker<br>[root@monitor-views ~]# systemctl status docker<br>● docker.service - Docker Application Container Engine<br>Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)<br>Active: active (running) since Fri 2021-07-30 16:55:35 CST; 20ms ago<br>Docs: https://docs.docker.com<br>Main PID: 7521 (dockerd)<br>Tasks: 13<br>Memory: 47.4M<br>CGroup: /system.slice/docker.service<br>└─7521 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock<br>......<br><br>[root@monitor-views ~]# docker run -d -p 3000:3000 --name grafana-server grafana/grafana<br>240e0d608f0a450f48982a728aec9876baa3cf1fe453950a57e3f1b9cdb2ba17<br><br>[root@monitor-views ~]# docker ps<br>CONTAINER ID   IMAGE             COMMAND     CREATED          STATUS          PORTS                                       NAMES<br>240e0d608f0a   grafana/grafana   <span class="hljs-string">&quot;/run.sh&quot;</span>   18 seconds ago   Up 17 seconds   0.0.0.0:3000-&gt;3000/tcp, :::3000-&gt;3000/tcp   grafana-server<br><br><br><br></code></pre></td></tr></table></figure><p>访问测试<a href="http://172.17.88.232:3000/login">http://172.17.88.232:3000/login</a><br>默认密码: admin&#x2F;admin,首次登录后修改密码<br>admin&#x2F;Narwal@123</p><h2 id="模板使用"><a href="#模板使用" class="headerlink" title="模板使用"></a>模板使用</h2><p>视图下载官方地址: <a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a><br>根据数据源搜索即可下载，也可以复制模板ID号导入到面板中</p>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
      <category>prometheus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>prometheus</tag>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
